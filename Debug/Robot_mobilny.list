
Robot_mobilny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003b10  08003b10  00013b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000000  08003b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000137c  20000180  08003d08  00020180  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200014fc  08003d08  000214fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
  9 .debug_info   000233c4  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004c6c  00000000  00000000  0004356d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009256  00000000  00000000  000481d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e28  00000000  00000000  00051430  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012d0  00000000  00000000  00052258  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008acc  00000000  00000000  00053528  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b1a  00000000  00000000  0005bff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00060b0e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002620  00000000  00000000  00060b8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08003af8 	.word	0x08003af8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08003af8 	.word	0x08003af8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fafa 	bl	800075c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 faa2 	bl	80006c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	2000011c 	.word	0x2000011c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fa7b 	bl	800069c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f003 f94c 	bl	8003448 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200003c0 	.word	0x200003c0
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200003c0 	.word	0x200003c0

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_ADC_ConvCpltCallback>:
 8000200:	4770      	bx	lr

08000202 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000202:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000204:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000208:	f012 0f50 	tst.w	r2, #80	; 0x50
 800020c:	d11b      	bne.n	8000246 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800020e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000214:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	6892      	ldr	r2, [r2, #8]
 800021a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800021e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000222:	d10c      	bne.n	800023e <ADC_DMAConvCplt+0x3c>
 8000224:	68da      	ldr	r2, [r3, #12]
 8000226:	b952      	cbnz	r2, 800023e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800022a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800022e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000232:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000234:	bf5e      	ittt	pl
 8000236:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000238:	f042 0201 	orrpl.w	r2, r2, #1
 800023c:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ffde 	bl	8000200 <HAL_ADC_ConvCpltCallback>
 8000244:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000246:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4718      	bx	r3

08000250 <HAL_ADC_ConvHalfCpltCallback>:
 8000250:	4770      	bx	lr

08000252 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000252:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000254:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000256:	f7ff fffb 	bl	8000250 <HAL_ADC_ConvHalfCpltCallback>
 800025a:	bd08      	pop	{r3, pc}

0800025c <HAL_ADC_ErrorCallback>:
{
 800025c:	4770      	bx	lr

0800025e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800025e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000260:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000262:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800026a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800026c:	f043 0304 	orr.w	r3, r3, #4
 8000270:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000272:	f7ff fff3 	bl	800025c <HAL_ADC_ErrorCallback>
 8000276:	bd08      	pop	{r3, pc}

08000278 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000278:	2300      	movs	r3, #0
{ 
 800027a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800027c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800027e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000282:	2b01      	cmp	r3, #1
 8000284:	d074      	beq.n	8000370 <HAL_ADC_ConfigChannel+0xf8>
 8000286:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000288:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800028a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800028e:	2d06      	cmp	r5, #6
 8000290:	6802      	ldr	r2, [r0, #0]
 8000292:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000296:	680c      	ldr	r4, [r1, #0]
 8000298:	d825      	bhi.n	80002e6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800029a:	442b      	add	r3, r5
 800029c:	251f      	movs	r5, #31
 800029e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80002a0:	3b05      	subs	r3, #5
 80002a2:	409d      	lsls	r5, r3
 80002a4:	ea26 0505 	bic.w	r5, r6, r5
 80002a8:	fa04 f303 	lsl.w	r3, r4, r3
 80002ac:	432b      	orrs	r3, r5
 80002ae:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80002b0:	2c09      	cmp	r4, #9
 80002b2:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80002b6:	688d      	ldr	r5, [r1, #8]
 80002b8:	d92f      	bls.n	800031a <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80002ba:	2607      	movs	r6, #7
 80002bc:	4423      	add	r3, r4
 80002be:	68d1      	ldr	r1, [r2, #12]
 80002c0:	3b1e      	subs	r3, #30
 80002c2:	409e      	lsls	r6, r3
 80002c4:	ea21 0106 	bic.w	r1, r1, r6
 80002c8:	fa05 f303 	lsl.w	r3, r5, r3
 80002cc:	430b      	orrs	r3, r1
 80002ce:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80002d0:	f1a4 0310 	sub.w	r3, r4, #16
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d92b      	bls.n	8000330 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002d8:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80002da:	2200      	movs	r2, #0
 80002dc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	b002      	add	sp, #8
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80002e6:	2d0c      	cmp	r5, #12
 80002e8:	d80b      	bhi.n	8000302 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80002ea:	442b      	add	r3, r5
 80002ec:	251f      	movs	r5, #31
 80002ee:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80002f0:	3b23      	subs	r3, #35	; 0x23
 80002f2:	409d      	lsls	r5, r3
 80002f4:	ea26 0505 	bic.w	r5, r6, r5
 80002f8:	fa04 f303 	lsl.w	r3, r4, r3
 80002fc:	432b      	orrs	r3, r5
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000300:	e7d6      	b.n	80002b0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000302:	442b      	add	r3, r5
 8000304:	251f      	movs	r5, #31
 8000306:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000308:	3b41      	subs	r3, #65	; 0x41
 800030a:	409d      	lsls	r5, r3
 800030c:	ea26 0505 	bic.w	r5, r6, r5
 8000310:	fa04 f303 	lsl.w	r3, r4, r3
 8000314:	432b      	orrs	r3, r5
 8000316:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000318:	e7ca      	b.n	80002b0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800031a:	2607      	movs	r6, #7
 800031c:	6911      	ldr	r1, [r2, #16]
 800031e:	4423      	add	r3, r4
 8000320:	409e      	lsls	r6, r3
 8000322:	ea21 0106 	bic.w	r1, r1, r6
 8000326:	fa05 f303 	lsl.w	r3, r5, r3
 800032a:	430b      	orrs	r3, r1
 800032c:	6113      	str	r3, [r2, #16]
 800032e:	e7cf      	b.n	80002d0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <HAL_ADC_ConfigChannel+0xfc>)
 8000332:	429a      	cmp	r2, r3
 8000334:	d116      	bne.n	8000364 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000336:	6893      	ldr	r3, [r2, #8]
 8000338:	021b      	lsls	r3, r3, #8
 800033a:	d4cd      	bmi.n	80002d8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800033c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800033e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000344:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000346:	d1c7      	bne.n	80002d8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <HAL_ADC_ConfigChannel+0x100>)
 800034a:	4a0c      	ldr	r2, [pc, #48]	; (800037c <HAL_ADC_ConfigChannel+0x104>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000352:	230a      	movs	r3, #10
 8000354:	4353      	muls	r3, r2
            wait_loop_index--;
 8000356:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000358:	9b01      	ldr	r3, [sp, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0bc      	beq.n	80002d8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800035e:	9b01      	ldr	r3, [sp, #4]
 8000360:	3b01      	subs	r3, #1
 8000362:	e7f8      	b.n	8000356 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000364:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800036c:	2301      	movs	r3, #1
 800036e:	e7b4      	b.n	80002da <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000370:	2302      	movs	r3, #2
 8000372:	e7b5      	b.n	80002e0 <HAL_ADC_ConfigChannel+0x68>
 8000374:	40012400 	.word	0x40012400
 8000378:	2000011c 	.word	0x2000011c
 800037c:	000f4240 	.word	0x000f4240

08000380 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000380:	2300      	movs	r3, #0
{
 8000382:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000384:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000386:	6803      	ldr	r3, [r0, #0]
{
 8000388:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	07d2      	lsls	r2, r2, #31
 800038e:	d502      	bpl.n	8000396 <ADC_Enable+0x16>
  return HAL_OK;
 8000390:	2000      	movs	r0, #0
}
 8000392:	b002      	add	sp, #8
 8000394:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000396:	689a      	ldr	r2, [r3, #8]
 8000398:	f042 0201 	orr.w	r2, r2, #1
 800039c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <ADC_Enable+0x68>)
 80003a0:	4a12      	ldr	r2, [pc, #72]	; (80003ec <ADC_Enable+0x6c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80003a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80003aa:	9b01      	ldr	r3, [sp, #4]
 80003ac:	b9c3      	cbnz	r3, 80003e0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80003ae:	f7ff ff0f 	bl	80001d0 <HAL_GetTick>
 80003b2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	689d      	ldr	r5, [r3, #8]
 80003b8:	f015 0501 	ands.w	r5, r5, #1
 80003bc:	d1e8      	bne.n	8000390 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003be:	f7ff ff07 	bl	80001d0 <HAL_GetTick>
 80003c2:	1b80      	subs	r0, r0, r6
 80003c4:	2802      	cmp	r0, #2
 80003c6:	d9f5      	bls.n	80003b4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80003ca:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80003d6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003de:	e7d8      	b.n	8000392 <ADC_Enable+0x12>
      wait_loop_index--;
 80003e0:	9b01      	ldr	r3, [sp, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	e7e0      	b.n	80003a8 <ADC_Enable+0x28>
 80003e6:	bf00      	nop
 80003e8:	2000011c 	.word	0x2000011c
 80003ec:	000f4240 	.word	0x000f4240

080003f0 <HAL_ADC_Start_DMA>:
{
 80003f0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80003f4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003f6:	4b40      	ldr	r3, [pc, #256]	; (80004f8 <HAL_ADC_Start_DMA+0x108>)
 80003f8:	6802      	ldr	r2, [r0, #0]
{
 80003fa:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003fc:	429a      	cmp	r2, r3
{
 80003fe:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000400:	d002      	beq.n	8000408 <HAL_ADC_Start_DMA+0x18>
 8000402:	493e      	ldr	r1, [pc, #248]	; (80004fc <HAL_ADC_Start_DMA+0x10c>)
 8000404:	428a      	cmp	r2, r1
 8000406:	d103      	bne.n	8000410 <HAL_ADC_Start_DMA+0x20>
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800040e:	d16e      	bne.n	80004ee <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000410:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000414:	2b01      	cmp	r3, #1
 8000416:	d06c      	beq.n	80004f2 <HAL_ADC_Start_DMA+0x102>
 8000418:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800041a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800041c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000420:	f7ff ffae 	bl	8000380 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000424:	4606      	mov	r6, r0
 8000426:	2800      	cmp	r0, #0
 8000428:	d15d      	bne.n	80004e6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800042a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800042c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800042e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000434:	f020 0001 	bic.w	r0, r0, #1
 8000438:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800043c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800043e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000440:	d104      	bne.n	800044c <HAL_ADC_Start_DMA+0x5c>
 8000442:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <HAL_ADC_Start_DMA+0x108>)
 8000444:	6853      	ldr	r3, [r2, #4]
 8000446:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800044a:	d13e      	bne.n	80004ca <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800044c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800044e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000452:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000454:	684b      	ldr	r3, [r1, #4]
 8000456:	055a      	lsls	r2, r3, #21
 8000458:	d505      	bpl.n	8000466 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800045a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800045c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000464:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000468:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800046a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800046e:	bf18      	it	ne
 8000470:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000472:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000474:	bf18      	it	ne
 8000476:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800047a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800047c:	2300      	movs	r3, #0
 800047e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000484:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000486:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <HAL_ADC_Start_DMA+0x114>)
 800048a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <HAL_ADC_Start_DMA+0x118>)
 800048e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000490:	f06f 0302 	mvn.w	r3, #2
 8000494:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000498:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800049c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004a4:	4643      	mov	r3, r8
 80004a6:	f000 f99f 	bl	80007e8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80004aa:	6823      	ldr	r3, [r4, #0]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80004b2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	bf0c      	ite	eq
 80004ba:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004be:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80004c2:	609a      	str	r2, [r3, #8]
}
 80004c4:	4630      	mov	r0, r6
 80004c6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004d0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004d2:	6853      	ldr	r3, [r2, #4]
 80004d4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004d6:	bf41      	itttt	mi
 80004d8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80004da:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80004de:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80004e2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80004e4:	e7bf      	b.n	8000466 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80004e6:	2300      	movs	r3, #0
 80004e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80004ec:	e7ea      	b.n	80004c4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80004ee:	2601      	movs	r6, #1
 80004f0:	e7e8      	b.n	80004c4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80004f2:	2602      	movs	r6, #2
 80004f4:	e7e6      	b.n	80004c4 <HAL_ADC_Start_DMA+0xd4>
 80004f6:	bf00      	nop
 80004f8:	40012400 	.word	0x40012400
 80004fc:	40012800 	.word	0x40012800
 8000500:	08000203 	.word	0x08000203
 8000504:	08000253 	.word	0x08000253
 8000508:	0800025f 	.word	0x0800025f

0800050c <ADC_ConversionStop_Disable>:
{
 800050c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800050e:	6803      	ldr	r3, [r0, #0]
{
 8000510:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	07d2      	lsls	r2, r2, #31
 8000516:	d401      	bmi.n	800051c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000518:	2000      	movs	r0, #0
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800051c:	689a      	ldr	r2, [r3, #8]
 800051e:	f022 0201 	bic.w	r2, r2, #1
 8000522:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000524:	f7ff fe54 	bl	80001d0 <HAL_GetTick>
 8000528:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	07db      	lsls	r3, r3, #31
 8000530:	d5f2      	bpl.n	8000518 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000532:	f7ff fe4d 	bl	80001d0 <HAL_GetTick>
 8000536:	1b40      	subs	r0, r0, r5
 8000538:	2802      	cmp	r0, #2
 800053a:	d9f6      	bls.n	800052a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800053c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800053e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000540:	f043 0310 	orr.w	r3, r3, #16
 8000544:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800054e:	bd38      	pop	{r3, r4, r5, pc}

08000550 <HAL_ADC_Init>:
{
 8000550:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000552:	4604      	mov	r4, r0
 8000554:	2800      	cmp	r0, #0
 8000556:	d071      	beq.n	800063c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000558:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800055a:	b923      	cbnz	r3, 8000566 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800055c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800055e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000562:	f002 fd17 	bl	8002f94 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000566:	4620      	mov	r0, r4
 8000568:	f7ff ffd0 	bl	800050c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800056c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800056e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000574:	d164      	bne.n	8000640 <HAL_ADC_Init+0xf0>
 8000576:	2800      	cmp	r0, #0
 8000578:	d162      	bne.n	8000640 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800057a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800057c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000580:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000582:	f023 0302 	bic.w	r3, r3, #2
 8000586:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800058a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800058c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800058e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000590:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000592:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000596:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800059a:	d038      	beq.n	800060e <HAL_ADC_Init+0xbe>
 800059c:	2901      	cmp	r1, #1
 800059e:	bf14      	ite	ne
 80005a0:	4606      	movne	r6, r0
 80005a2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a6:	6965      	ldr	r5, [r4, #20]
 80005a8:	2d01      	cmp	r5, #1
 80005aa:	d107      	bne.n	80005bc <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d130      	bne.n	8000612 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80005b0:	69a3      	ldr	r3, [r4, #24]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80005b8:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80005bc:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80005c2:	685d      	ldr	r5, [r3, #4]
 80005c4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80005c8:	ea45 0506 	orr.w	r5, r5, r6
 80005cc:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80005ce:	689e      	ldr	r6, [r3, #8]
 80005d0:	4d1d      	ldr	r5, [pc, #116]	; (8000648 <HAL_ADC_Init+0xf8>)
 80005d2:	ea05 0506 	and.w	r5, r5, r6
 80005d6:	ea45 0502 	orr.w	r5, r5, r2
 80005da:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005dc:	d001      	beq.n	80005e2 <HAL_ADC_Init+0x92>
 80005de:	2901      	cmp	r1, #1
 80005e0:	d120      	bne.n	8000624 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80005e2:	6921      	ldr	r1, [r4, #16]
 80005e4:	3901      	subs	r1, #1
 80005e6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80005e8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80005ea:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80005ee:	4329      	orrs	r1, r5
 80005f0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005f2:	6899      	ldr	r1, [r3, #8]
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_Init+0xfc>)
 80005f6:	400b      	ands	r3, r1
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d115      	bne.n	8000628 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80005fc:	2300      	movs	r3, #0
 80005fe:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000600:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000602:	f023 0303 	bic.w	r3, r3, #3
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	62a3      	str	r3, [r4, #40]	; 0x28
 800060c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800060e:	460e      	mov	r6, r1
 8000610:	e7c9      	b.n	80005a6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800061a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000622:	e7cb      	b.n	80005bc <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000624:	2100      	movs	r1, #0
 8000626:	e7df      	b.n	80005e8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800062a:	f023 0312 	bic.w	r3, r3, #18
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800063c:	2001      	movs	r0, #1
}
 800063e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	62a3      	str	r3, [r4, #40]	; 0x28
 8000646:	e7f9      	b.n	800063c <HAL_ADC_Init+0xec>
 8000648:	ffe1f7fd 	.word	0xffe1f7fd
 800064c:	ff1f0efe 	.word	0xff1f0efe

08000650 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8000650:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000654:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000656:	2b01      	cmp	r3, #1
{
 8000658:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800065a:	d01d      	beq.n	8000698 <HAL_ADC_Stop_DMA+0x48>
 800065c:	2301      	movs	r3, #1
 800065e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000662:	f7ff ff53 	bl	800050c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8000666:	b980      	cbnz	r0, 800068a <HAL_ADC_Stop_DMA+0x3a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000668:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800066a:	6a20      	ldr	r0, [r4, #32]
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800066c:	6893      	ldr	r3, [r2, #8]
 800066e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000672:	6093      	str	r3, [r2, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000674:	f000 f8f5 	bl	8000862 <HAL_DMA_Abort>
      ADC_STATE_CLR_SET(hadc->State,
 8000678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 800067a:	b950      	cbnz	r0, 8000692 <HAL_ADC_Stop_DMA+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 800067c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000680:	f023 0301 	bic.w	r3, r3, #1
 8000684:	f043 0301 	orr.w	r3, r3, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000688:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800068a:	2300      	movs	r3, #0
 800068c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 8000690:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000696:	e7f7      	b.n	8000688 <HAL_ADC_Stop_DMA+0x38>
  __HAL_LOCK(hadc);
 8000698:	2002      	movs	r0, #2
}
 800069a:	bd10      	pop	{r4, pc}

0800069c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006aa:	041b      	lsls	r3, r3, #16
 80006ac:	0c1b      	lsrs	r3, r3, #16
 80006ae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b8:	60d3      	str	r3, [r2, #12]
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	68dc      	ldr	r4, [r3, #12]
 80006c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	bf28      	it	cs
 80006d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006dc:	bf98      	it	ls
 80006de:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	fa05 f303 	lsl.w	r3, r5, r3
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	bf88      	it	hi
 80006ea:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4019      	ands	r1, r3
 80006ee:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	3c01      	subs	r4, #1
 80006f6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006f8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fa:	ea42 0201 	orr.w	r2, r2, r1
 80006fe:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	bfaf      	iteee	ge
 8000704:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	4b06      	ldrlt	r3, [pc, #24]	; (8000724 <HAL_NVIC_SetPriority+0x64>)
 800070a:	f000 000f 	andlt.w	r0, r0, #15
 800070e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	bfa5      	ittet	ge
 8000712:	b2d2      	uxtbge	r2, r2
 8000714:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	e000ed14 	.word	0xe000ed14

08000728 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000728:	2301      	movs	r3, #1
 800072a:	0942      	lsrs	r2, r0, #5
 800072c:	f000 001f 	and.w	r0, r0, #31
 8000730:	fa03 f000 	lsl.w	r0, r3, r0
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_NVIC_EnableIRQ+0x14>)
 8000736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000740:	2201      	movs	r2, #1
 8000742:	0943      	lsrs	r3, r0, #5
 8000744:	f000 001f 	and.w	r0, r0, #31
 8000748:	fa02 f000 	lsl.w	r0, r2, r0
 800074c:	4a02      	ldr	r2, [pc, #8]	; (8000758 <HAL_NVIC_DisableIRQ+0x18>)
 800074e:	3320      	adds	r3, #32
 8000750:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e100 	.word	0xe000e100

0800075c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	3801      	subs	r0, #1
 800075e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000762:	d20a      	bcs.n	800077a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000788:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800078a:	b330      	cbz	r0, 80007da <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800078c:	2214      	movs	r2, #20
 800078e:	6801      	ldr	r1, [r0, #0]
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000792:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000794:	440b      	add	r3, r1
 8000796:	fbb3 f3f2 	udiv	r3, r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80007a0:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80007a2:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80007a4:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80007a6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80007aa:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007ac:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80007ae:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007b2:	4323      	orrs	r3, r4
 80007b4:	6904      	ldr	r4, [r0, #16]
 80007b6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007b8:	6944      	ldr	r4, [r0, #20]
 80007ba:	4323      	orrs	r3, r4
 80007bc:	6984      	ldr	r4, [r0, #24]
 80007be:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80007c0:	69c4      	ldr	r4, [r0, #28]
 80007c2:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80007c4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80007c6:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80007c8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ca:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80007cc:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007d0:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80007d2:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80007da:	2001      	movs	r0, #1
}
 80007dc:	bd10      	pop	{r4, pc}
 80007de:	bf00      	nop
 80007e0:	bffdfff8 	.word	0xbffdfff8
 80007e4:	40020000 	.word	0x40020000

080007e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80007ea:	f890 4020 	ldrb.w	r4, [r0, #32]
 80007ee:	2c01      	cmp	r4, #1
 80007f0:	d035      	beq.n	800085e <HAL_DMA_Start_IT+0x76>
 80007f2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80007f4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80007f8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80007fc:	42a5      	cmp	r5, r4
 80007fe:	f04f 0600 	mov.w	r6, #0
 8000802:	f04f 0402 	mov.w	r4, #2
 8000806:	d128      	bne.n	800085a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000808:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800080c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800080e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000810:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000812:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000814:	f026 0601 	bic.w	r6, r6, #1
 8000818:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800081a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800081c:	40bd      	lsls	r5, r7
 800081e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000820:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000822:	6843      	ldr	r3, [r0, #4]
 8000824:	6805      	ldr	r5, [r0, #0]
 8000826:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000828:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800082a:	bf0b      	itete	eq
 800082c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800082e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000830:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000832:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000834:	b14b      	cbz	r3, 800084a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800083c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800083e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000840:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	602b      	str	r3, [r5, #0]
 8000848:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	f023 0304 	bic.w	r3, r3, #4
 8000850:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	f043 030a 	orr.w	r3, r3, #10
 8000858:	e7f0      	b.n	800083c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800085a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800085e:	2002      	movs	r0, #2
}
 8000860:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000862 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000862:	6802      	ldr	r2, [r0, #0]
{
 8000864:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000866:	6811      	ldr	r1, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000868:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800086a:	f021 010e 	bic.w	r1, r1, #14
 800086e:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(hdma);
 8000870:	6811      	ldr	r1, [r2, #0]
 8000872:	f021 0101 	bic.w	r1, r1, #1
 8000876:	6011      	str	r1, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000878:	2101      	movs	r1, #1
 800087a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);      
 8000882:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000884:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000888:	f883 0020 	strb.w	r0, [r3, #32]
}
 800088c:	4770      	bx	lr
	...

08000890 <HAL_DMA_IRQHandler>:
{
 8000890:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000892:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000894:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000896:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000898:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800089a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800089c:	4095      	lsls	r5, r2
 800089e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80008a0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80008a2:	d032      	beq.n	800090a <HAL_DMA_IRQHandler+0x7a>
 80008a4:	074d      	lsls	r5, r1, #29
 80008a6:	d530      	bpl.n	800090a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008ac:	bf5e      	ittt	pl
 80008ae:	681a      	ldrpl	r2, [r3, #0]
 80008b0:	f022 0204 	bicpl.w	r2, r2, #4
 80008b4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80008b6:	4a3e      	ldr	r2, [pc, #248]	; (80009b0 <HAL_DMA_IRQHandler+0x120>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d019      	beq.n	80008f0 <HAL_DMA_IRQHandler+0x60>
 80008bc:	3214      	adds	r2, #20
 80008be:	4293      	cmp	r3, r2
 80008c0:	d018      	beq.n	80008f4 <HAL_DMA_IRQHandler+0x64>
 80008c2:	3214      	adds	r2, #20
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d017      	beq.n	80008f8 <HAL_DMA_IRQHandler+0x68>
 80008c8:	3214      	adds	r2, #20
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d017      	beq.n	80008fe <HAL_DMA_IRQHandler+0x6e>
 80008ce:	3214      	adds	r2, #20
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d017      	beq.n	8000904 <HAL_DMA_IRQHandler+0x74>
 80008d4:	3214      	adds	r2, #20
 80008d6:	4293      	cmp	r3, r2
 80008d8:	bf0c      	ite	eq
 80008da:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80008de:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80008e2:	4a34      	ldr	r2, [pc, #208]	; (80009b4 <HAL_DMA_IRQHandler+0x124>)
 80008e4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80008e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d05e      	beq.n	80009aa <HAL_DMA_IRQHandler+0x11a>
}
 80008ec:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80008ee:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80008f0:	2304      	movs	r3, #4
 80008f2:	e7f6      	b.n	80008e2 <HAL_DMA_IRQHandler+0x52>
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	e7f4      	b.n	80008e2 <HAL_DMA_IRQHandler+0x52>
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	e7f1      	b.n	80008e2 <HAL_DMA_IRQHandler+0x52>
 80008fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000902:	e7ee      	b.n	80008e2 <HAL_DMA_IRQHandler+0x52>
 8000904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000908:	e7eb      	b.n	80008e2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800090a:	2502      	movs	r5, #2
 800090c:	4095      	lsls	r5, r2
 800090e:	4225      	tst	r5, r4
 8000910:	d035      	beq.n	800097e <HAL_DMA_IRQHandler+0xee>
 8000912:	078d      	lsls	r5, r1, #30
 8000914:	d533      	bpl.n	800097e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	0694      	lsls	r4, r2, #26
 800091a:	d406      	bmi.n	800092a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f022 020a 	bic.w	r2, r2, #10
 8000922:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000924:	2201      	movs	r2, #1
 8000926:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800092a:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <HAL_DMA_IRQHandler+0x120>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d019      	beq.n	8000964 <HAL_DMA_IRQHandler+0xd4>
 8000930:	3214      	adds	r2, #20
 8000932:	4293      	cmp	r3, r2
 8000934:	d018      	beq.n	8000968 <HAL_DMA_IRQHandler+0xd8>
 8000936:	3214      	adds	r2, #20
 8000938:	4293      	cmp	r3, r2
 800093a:	d017      	beq.n	800096c <HAL_DMA_IRQHandler+0xdc>
 800093c:	3214      	adds	r2, #20
 800093e:	4293      	cmp	r3, r2
 8000940:	d017      	beq.n	8000972 <HAL_DMA_IRQHandler+0xe2>
 8000942:	3214      	adds	r2, #20
 8000944:	4293      	cmp	r3, r2
 8000946:	d017      	beq.n	8000978 <HAL_DMA_IRQHandler+0xe8>
 8000948:	3214      	adds	r2, #20
 800094a:	4293      	cmp	r3, r2
 800094c:	bf0c      	ite	eq
 800094e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000952:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_DMA_IRQHandler+0x124>)
 8000958:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800095a:	2300      	movs	r3, #0
 800095c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000960:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000962:	e7c1      	b.n	80008e8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000964:	2302      	movs	r3, #2
 8000966:	e7f6      	b.n	8000956 <HAL_DMA_IRQHandler+0xc6>
 8000968:	2320      	movs	r3, #32
 800096a:	e7f4      	b.n	8000956 <HAL_DMA_IRQHandler+0xc6>
 800096c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000970:	e7f1      	b.n	8000956 <HAL_DMA_IRQHandler+0xc6>
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	e7ee      	b.n	8000956 <HAL_DMA_IRQHandler+0xc6>
 8000978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097c:	e7eb      	b.n	8000956 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800097e:	2508      	movs	r5, #8
 8000980:	4095      	lsls	r5, r2
 8000982:	4225      	tst	r5, r4
 8000984:	d011      	beq.n	80009aa <HAL_DMA_IRQHandler+0x11a>
 8000986:	0709      	lsls	r1, r1, #28
 8000988:	d50f      	bpl.n	80009aa <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	f021 010e 	bic.w	r1, r1, #14
 8000990:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000992:	2301      	movs	r3, #1
 8000994:	fa03 f202 	lsl.w	r2, r3, r2
 8000998:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800099a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800099c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80009a0:	2300      	movs	r3, #0
 80009a2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80009a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80009a8:	e79e      	b.n	80008e8 <HAL_DMA_IRQHandler+0x58>
}
 80009aa:	bc70      	pop	{r4, r5, r6}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40020008 	.word	0x40020008
 80009b4:	40020000 	.word	0x40020000

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80009bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009be:	4616      	mov	r6, r2
 80009c0:	4b65      	ldr	r3, [pc, #404]	; (8000b58 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000b68 <HAL_GPIO_Init+0x1b0>
 80009c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000b6c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80009ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80009d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80009d8:	45a0      	cmp	r8, r4
 80009da:	d17f      	bne.n	8000adc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80009dc:	684d      	ldr	r5, [r1, #4]
 80009de:	2d12      	cmp	r5, #18
 80009e0:	f000 80af 	beq.w	8000b42 <HAL_GPIO_Init+0x18a>
 80009e4:	f200 8088 	bhi.w	8000af8 <HAL_GPIO_Init+0x140>
 80009e8:	2d02      	cmp	r5, #2
 80009ea:	f000 80a7 	beq.w	8000b3c <HAL_GPIO_Init+0x184>
 80009ee:	d87c      	bhi.n	8000aea <HAL_GPIO_Init+0x132>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	f000 808e 	beq.w	8000b12 <HAL_GPIO_Init+0x15a>
 80009f6:	2d01      	cmp	r5, #1
 80009f8:	f000 809e 	beq.w	8000b38 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a00:	2cff      	cmp	r4, #255	; 0xff
 8000a02:	bf93      	iteet	ls
 8000a04:	4682      	movls	sl, r0
 8000a06:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000a0a:	3d08      	subhi	r5, #8
 8000a0c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000a10:	bf92      	itee	ls
 8000a12:	00b5      	lslls	r5, r6, #2
 8000a14:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000a18:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a1a:	fa09 f805 	lsl.w	r8, r9, r5
 8000a1e:	ea2b 0808 	bic.w	r8, fp, r8
 8000a22:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a26:	bf88      	it	hi
 8000a28:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a2c:	ea48 0505 	orr.w	r5, r8, r5
 8000a30:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a34:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000a38:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000a3c:	d04e      	beq.n	8000adc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3e:	4d47      	ldr	r5, [pc, #284]	; (8000b5c <HAL_GPIO_Init+0x1a4>)
 8000a40:	4f46      	ldr	r7, [pc, #280]	; (8000b5c <HAL_GPIO_Init+0x1a4>)
 8000a42:	69ad      	ldr	r5, [r5, #24]
 8000a44:	f026 0803 	bic.w	r8, r6, #3
 8000a48:	f045 0501 	orr.w	r5, r5, #1
 8000a4c:	61bd      	str	r5, [r7, #24]
 8000a4e:	69bd      	ldr	r5, [r7, #24]
 8000a50:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000a54:	f005 0501 	and.w	r5, r5, #1
 8000a58:	9501      	str	r5, [sp, #4]
 8000a5a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a5e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a62:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a64:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000a68:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a6c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000a70:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a74:	4d3a      	ldr	r5, [pc, #232]	; (8000b60 <HAL_GPIO_Init+0x1a8>)
 8000a76:	42a8      	cmp	r0, r5
 8000a78:	d068      	beq.n	8000b4c <HAL_GPIO_Init+0x194>
 8000a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a7e:	42a8      	cmp	r0, r5
 8000a80:	d066      	beq.n	8000b50 <HAL_GPIO_Init+0x198>
 8000a82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a86:	42a8      	cmp	r0, r5
 8000a88:	d064      	beq.n	8000b54 <HAL_GPIO_Init+0x19c>
 8000a8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a8e:	42a8      	cmp	r0, r5
 8000a90:	bf0c      	ite	eq
 8000a92:	2503      	moveq	r5, #3
 8000a94:	2504      	movne	r5, #4
 8000a96:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a9a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000a9e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa8:	bf14      	ite	ne
 8000aaa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aac:	43a5      	biceq	r5, r4
 8000aae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab6:	bf14      	ite	ne
 8000ab8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aba:	43a5      	biceq	r5, r4
 8000abc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000abe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac4:	bf14      	ite	ne
 8000ac6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ac8:	43a5      	biceq	r5, r4
 8000aca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000acc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ace:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ad2:	bf14      	ite	ne
 8000ad4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad6:	ea25 0404 	biceq.w	r4, r5, r4
 8000ada:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000adc:	3601      	adds	r6, #1
 8000ade:	2e10      	cmp	r6, #16
 8000ae0:	f47f af73 	bne.w	80009ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000ae4:	b003      	add	sp, #12
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000aea:	2d03      	cmp	r5, #3
 8000aec:	d022      	beq.n	8000b34 <HAL_GPIO_Init+0x17c>
 8000aee:	2d11      	cmp	r5, #17
 8000af0:	d184      	bne.n	80009fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af2:	68ca      	ldr	r2, [r1, #12]
 8000af4:	3204      	adds	r2, #4
          break;
 8000af6:	e781      	b.n	80009fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000af8:	4f1a      	ldr	r7, [pc, #104]	; (8000b64 <HAL_GPIO_Init+0x1ac>)
 8000afa:	42bd      	cmp	r5, r7
 8000afc:	d009      	beq.n	8000b12 <HAL_GPIO_Init+0x15a>
 8000afe:	d812      	bhi.n	8000b26 <HAL_GPIO_Init+0x16e>
 8000b00:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000b70 <HAL_GPIO_Init+0x1b8>
 8000b04:	454d      	cmp	r5, r9
 8000b06:	d004      	beq.n	8000b12 <HAL_GPIO_Init+0x15a>
 8000b08:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000b0c:	454d      	cmp	r5, r9
 8000b0e:	f47f af75 	bne.w	80009fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b12:	688a      	ldr	r2, [r1, #8]
 8000b14:	b1c2      	cbz	r2, 8000b48 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b16:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b18:	bf0c      	ite	eq
 8000b1a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b1e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b22:	2208      	movs	r2, #8
 8000b24:	e76a      	b.n	80009fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000b26:	4575      	cmp	r5, lr
 8000b28:	d0f3      	beq.n	8000b12 <HAL_GPIO_Init+0x15a>
 8000b2a:	4565      	cmp	r5, ip
 8000b2c:	d0f1      	beq.n	8000b12 <HAL_GPIO_Init+0x15a>
 8000b2e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000b74 <HAL_GPIO_Init+0x1bc>
 8000b32:	e7eb      	b.n	8000b0c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b34:	2200      	movs	r2, #0
 8000b36:	e761      	b.n	80009fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b38:	68ca      	ldr	r2, [r1, #12]
          break;
 8000b3a:	e75f      	b.n	80009fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b3c:	68ca      	ldr	r2, [r1, #12]
 8000b3e:	3208      	adds	r2, #8
          break;
 8000b40:	e75c      	b.n	80009fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b42:	68ca      	ldr	r2, [r1, #12]
 8000b44:	320c      	adds	r2, #12
          break;
 8000b46:	e759      	b.n	80009fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b48:	2204      	movs	r2, #4
 8000b4a:	e757      	b.n	80009fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	e7a2      	b.n	8000a96 <HAL_GPIO_Init+0xde>
 8000b50:	2501      	movs	r5, #1
 8000b52:	e7a0      	b.n	8000a96 <HAL_GPIO_Init+0xde>
 8000b54:	2502      	movs	r5, #2
 8000b56:	e79e      	b.n	8000a96 <HAL_GPIO_Init+0xde>
 8000b58:	40010400 	.word	0x40010400
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800
 8000b64:	10210000 	.word	0x10210000
 8000b68:	10310000 	.word	0x10310000
 8000b6c:	10320000 	.word	0x10320000
 8000b70:	10110000 	.word	0x10110000
 8000b74:	10220000 	.word	0x10220000

08000b78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b78:	6883      	ldr	r3, [r0, #8]
 8000b7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000b7c:	bf14      	ite	ne
 8000b7e:	2001      	movne	r0, #1
 8000b80:	2000      	moveq	r0, #0
 8000b82:	4770      	bx	lr

08000b84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b84:	b10a      	cbz	r2, 8000b8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b86:	6101      	str	r1, [r0, #16]
 8000b88:	4770      	bx	lr
 8000b8a:	0409      	lsls	r1, r1, #16
 8000b8c:	e7fb      	b.n	8000b86 <HAL_GPIO_WritePin+0x2>
	...

08000b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b90:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000b94:	6959      	ldr	r1, [r3, #20]
 8000b96:	4201      	tst	r1, r0
 8000b98:	d002      	beq.n	8000ba0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b9a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b9c:	f002 fc00 	bl	80033a0 <HAL_GPIO_EXTI_Callback>
 8000ba0:	bd08      	pop	{r3, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000bac:	4604      	mov	r4, r0
{
 8000bae:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d060      	beq.n	8000c76 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000bb4:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000bb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bbc:	b91b      	cbnz	r3, 8000bc6 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bbe:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bc2:	f002 fda3 	bl	800370c <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bc6:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bc8:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000bca:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000bcc:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bd0:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000bd4:	f001 f966 	bl	8001ea4 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	f104 0804 	add.w	r8, r4, #4
 8000be2:	6033      	str	r3, [r6, #0]
 8000be4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000be8:	6820      	ldr	r0, [r4, #0]
 8000bea:	f001 f94b 	bl	8001e84 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	f001 f961 	bl	8001eb8 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000bfa:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000bfc:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000bfe:	4608      	mov	r0, r1
 8000c00:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000c04:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000c08:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000c0a:	3101      	adds	r1, #1
 8000c0c:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000c0e:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000c12:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000c16:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000c18:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000c1a:	6410      	str	r0, [r2, #64]	; 0x40
 8000c1c:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000c20:	d1f0      	bne.n	8000c04 <HAL_PCD_Init+0x5c>
 8000c22:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000c24:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000c26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000c2a:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000c30:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000c34:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000c38:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000c3c:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000c40:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000c44:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000c48:	d1ed      	bne.n	8000c26 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000c4a:	466e      	mov	r6, sp
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	6033      	str	r3, [r6, #0]
 8000c54:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000c58:	6820      	ldr	r0, [r4, #0]
 8000c5a:	f001 f92f 	bl	8001ebc <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000c5e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000c60:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000c64:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000c66:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000c6a:	f001 fbff 	bl	800246c <USB_DevDisconnect>
  return HAL_OK;
 8000c6e:	2000      	movs	r0, #0
}
 8000c70:	b006      	add	sp, #24
 8000c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000c76:	2001      	movs	r0, #1
 8000c78:	e7fa      	b.n	8000c70 <HAL_PCD_Init+0xc8>

08000c7a <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000c7a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c7e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000c80:	2b01      	cmp	r3, #1
{
 8000c82:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c84:	d00e      	beq.n	8000ca4 <HAL_PCD_Start+0x2a>
 8000c86:	2101      	movs	r1, #1
 8000c88:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000c8c:	f002 fe69 	bl	8003962 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000c90:	6820      	ldr	r0, [r4, #0]
 8000c92:	f001 fbe9 	bl	8002468 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000c96:	6820      	ldr	r0, [r4, #0]
 8000c98:	f001 f8fb 	bl	8001e92 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000ca2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000ca4:	2002      	movs	r0, #2
}
 8000ca6:	bd10      	pop	{r4, pc}

08000ca8 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000ca8:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000cac:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000cae:	2a01      	cmp	r2, #1
{
 8000cb0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cb2:	d00b      	beq.n	8000ccc <HAL_PCD_SetAddress+0x24>
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000cba:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000cbe:	6800      	ldr	r0, [r0, #0]
 8000cc0:	f001 fbcc 	bl	800245c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000cca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000ccc:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000cce:	bd10      	pop	{r4, pc}

08000cd0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000cd4:	b248      	sxtb	r0, r1
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cdc:	bfb5      	itete	lt
 8000cde:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ce2:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000ce6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ce8:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000cec:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000cee:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000cf0:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000cf2:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000cf4:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000cf8:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d009      	beq.n	8000d12 <HAL_PCD_EP_Open+0x42>
 8000cfe:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000d00:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000d02:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000d06:	f001 f8f5 	bl	8001ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000d10:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000d12:	2002      	movs	r0, #2
}
 8000d14:	bd38      	pop	{r3, r4, r5, pc}

08000d16 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000d16:	b24b      	sxtb	r3, r1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d1e:	bfb5      	itete	lt
 8000d20:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000d24:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d28:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000d2a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000d2e:	0fdb      	lsrs	r3, r3, #31
{  
 8000d30:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000d32:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000d34:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000d36:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000d3a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d009      	beq.n	8000d54 <HAL_PCD_EP_Close+0x3e>
 8000d40:	2301      	movs	r3, #1
 8000d42:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000d46:	6800      	ldr	r0, [r0, #0]
 8000d48:	f001 fa46 	bl	80021d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000d52:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d54:	2002      	movs	r0, #2
}
 8000d56:	bd10      	pop	{r4, pc}

08000d58 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d58:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d60:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000d62:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000d64:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000d68:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000d6c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000d6e:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000d72:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000d76:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000d7a:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000d7e:	6800      	ldr	r0, [r0, #0]
 8000d80:	f001 fb8e 	bl	80024a0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000d84:	4630      	mov	r0, r6
 8000d86:	bd70      	pop	{r4, r5, r6, pc}

08000d88 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000d88:	f001 010f 	and.w	r1, r1, #15
 8000d8c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000d90:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000d94:	4770      	bx	lr

08000d96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d96:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d9a:	b570      	push	{r4, r5, r6, lr}
 8000d9c:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000d9e:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000da0:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000da2:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000da4:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000da6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000daa:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000dae:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000db0:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000db2:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000db4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000db8:	6800      	ldr	r0, [r0, #0]
 8000dba:	f001 fb71 	bl	80024a0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000dc4 <HAL_PCD_IRQHandler>:
{ 
 8000dc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000dca:	6800      	ldr	r0, [r0, #0]
 8000dcc:	f001 fb50 	bl	8002470 <USB_ReadInterrupts>
 8000dd0:	0400      	lsls	r0, r0, #16
 8000dd2:	f100 8098 	bmi.w	8000f06 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000dd6:	6820      	ldr	r0, [r4, #0]
 8000dd8:	f001 fb4a 	bl	8002470 <USB_ReadInterrupts>
 8000ddc:	0541      	lsls	r1, r0, #21
 8000dde:	d50f      	bpl.n	8000e00 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000de0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000de2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000de4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000df4:	f002 fcc1 	bl	800377a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f7ff ff54 	bl	8000ca8 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000e00:	6820      	ldr	r0, [r4, #0]
 8000e02:	f001 fb35 	bl	8002470 <USB_ReadInterrupts>
 8000e06:	0447      	lsls	r7, r0, #17
 8000e08:	d508      	bpl.n	8000e1c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000e0a:	6822      	ldr	r2, [r4, #0]
 8000e0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000e1c:	6820      	ldr	r0, [r4, #0]
 8000e1e:	f001 fb27 	bl	8002470 <USB_ReadInterrupts>
 8000e22:	0486      	lsls	r6, r0, #18
 8000e24:	d508      	bpl.n	8000e38 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000e26:	6822      	ldr	r2, [r4, #0]
 8000e28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	f001 fb19 	bl	8002470 <USB_ReadInterrupts>
 8000e3e:	04c5      	lsls	r5, r0, #19
 8000e40:	d51c      	bpl.n	8000e7c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000e42:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000e44:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000e46:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e4a:	f023 0304 	bic.w	r3, r3, #4
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	0c1b      	lsrs	r3, r3, #16
 8000e52:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000e56:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000e5a:	f023 0308 	bic.w	r3, r3, #8
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	0c1b      	lsrs	r3, r3, #16
 8000e62:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000e66:	f002 fcab 	bl	80037c0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000e6a:	6822      	ldr	r2, [r4, #0]
 8000e6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000e7c:	6820      	ldr	r0, [r4, #0]
 8000e7e:	f001 faf7 	bl	8002470 <USB_ReadInterrupts>
 8000e82:	0500      	lsls	r0, r0, #20
 8000e84:	d51d      	bpl.n	8000ec2 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e86:	6820      	ldr	r0, [r4, #0]
 8000e88:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000e96:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e9e:	041b      	lsls	r3, r3, #16
 8000ea0:	0c1b      	lsrs	r3, r3, #16
 8000ea2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000ea6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000eb4:	f001 fadc 	bl	8002470 <USB_ReadInterrupts>
 8000eb8:	04c1      	lsls	r1, r0, #19
 8000eba:	d402      	bmi.n	8000ec2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f002 fc6f 	bl	80037a0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000ec2:	6820      	ldr	r0, [r4, #0]
 8000ec4:	f001 fad4 	bl	8002470 <USB_ReadInterrupts>
 8000ec8:	0582      	lsls	r2, r0, #22
 8000eca:	d50b      	bpl.n	8000ee4 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000ecc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000ece:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000ed0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ed8:	041b      	lsls	r3, r3, #16
 8000eda:	0c1b      	lsrs	r3, r3, #16
 8000edc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000ee0:	f002 fc47 	bl	8003772 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	f001 fac3 	bl	8002470 <USB_ReadInterrupts>
 8000eea:	05c3      	lsls	r3, r0, #23
 8000eec:	d508      	bpl.n	8000f00 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000f00:	b002      	add	sp, #8
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000f06:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f08:	4fc8      	ldr	r7, [pc, #800]	; (800122c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000f0a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001230 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f0e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001234 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000f12:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000f16:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	f57f af55 	bpl.w	8000dd6 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f2c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000f30:	f015 050f 	ands.w	r5, r5, #15
 8000f34:	f040 80ab 	bne.w	800108e <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000f38:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f3c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000f3e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f42:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000f44:	d126      	bne.n	8000f94 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f46:	403b      	ands	r3, r7
 8000f48:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f4a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f4e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f58:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000f5c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000f60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f66:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f68:	4413      	add	r3, r2
 8000f6a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f002 fbf9 	bl	8003764 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000f72:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0cf      	beq.n	8000f1a <HAL_PCD_IRQHandler+0x156>
 8000f7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d1cc      	bne.n	8000f1a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000f80:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f84:	6821      	ldr	r1, [r4, #0]
 8000f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f8e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000f92:	e7c2      	b.n	8000f1a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f94:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f9c:	051a      	lsls	r2, r3, #20
 8000f9e:	d51f      	bpl.n	8000fe0 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fa0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fa4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fb2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000fb6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fbe:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000fc2:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000fc6:	f001 fb6b 	bl	80026a0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000fca:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000fcc:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fd4:	051b      	lsls	r3, r3, #20
 8000fd6:	0d1b      	lsrs	r3, r3, #20
 8000fd8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000fda:	f002 fbb5 	bl	8003748 <HAL_PCD_SetupStageCallback>
 8000fde:	e79c      	b.n	8000f1a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fe0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000fe4:	041b      	lsls	r3, r3, #16
 8000fe6:	d598      	bpl.n	8000f1a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fe8:	8803      	ldrh	r3, [r0, #0]
 8000fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fee:	051b      	lsls	r3, r3, #20
 8000ff0:	0d1b      	lsrs	r3, r3, #20
 8000ff2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ff4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ff8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001002:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001006:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800100a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800100e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8001012:	b163      	cbz	r3, 800102e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001014:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8001018:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800101c:	f001 fb40 	bl	80026a0 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001020:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001024:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001028:	4413      	add	r3, r2
 800102a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800102e:	2100      	movs	r1, #0
 8001030:	4620      	mov	r0, r4
 8001032:	f002 fb8f 	bl	8003754 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001036:	6822      	ldr	r2, [r4, #0]
 8001038:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 800103c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001040:	2d3e      	cmp	r5, #62	; 0x3e
 8001042:	b289      	uxth	r1, r1
 8001044:	f101 0106 	add.w	r1, r1, #6
 8001048:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800104c:	d917      	bls.n	800107e <HAL_PCD_IRQHandler+0x2ba>
 800104e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001052:	06ee      	lsls	r6, r5, #27
 8001054:	bf04      	itt	eq
 8001056:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800105a:	b29b      	uxtheq	r3, r3
 800105c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001060:	b29b      	uxth	r3, r3
 8001062:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001066:	8813      	ldrh	r3, [r2, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	ea03 0308 	and.w	r3, r3, r8
 800106e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107a:	8013      	strh	r3, [r2, #0]
 800107c:	e74d      	b.n	8000f1a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800107e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001082:	07ed      	lsls	r5, r5, #31
 8001084:	bf44      	itt	mi
 8001086:	3301      	addmi	r3, #1
 8001088:	b29b      	uxthmi	r3, r3
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	e7e8      	b.n	8001060 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800108e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001092:	b29b      	uxth	r3, r3
 8001094:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001098:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800109c:	0419      	lsls	r1, r3, #16
 800109e:	d53f      	bpl.n	8001120 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010a0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80010a4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ac:	051b      	lsls	r3, r3, #20
 80010ae:	0d1b      	lsrs	r3, r3, #20
 80010b0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80010b4:	eb04 010a 	add.w	r1, r4, sl
 80010b8:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d174      	bne.n	80011aa <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010c4:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3306      	adds	r3, #6
 80010cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80010d4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80010d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80010dc:	b136      	cbz	r6, 80010ec <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80010de:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80010e2:	4633      	mov	r3, r6
 80010e4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80010e8:	f001 fada 	bl	80026a0 <USB_ReadPMA>
 80010ec:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80010f0:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 80010f4:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 80010f8:	4433      	add	r3, r6
 80010fa:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80010fe:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8001102:	4432      	add	r2, r6
 8001104:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001108:	b123      	cbz	r3, 8001114 <HAL_PCD_IRQHandler+0x350>
 800110a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 800110e:	4286      	cmp	r6, r0
 8001110:	f080 8086 	bcs.w	8001220 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001114:	44a2      	add	sl, r4
 8001116:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 800111a:	4620      	mov	r0, r4
 800111c:	f002 fb1a 	bl	8003754 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001120:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001124:	061a      	lsls	r2, r3, #24
 8001126:	f57f aef8 	bpl.w	8000f1a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800112a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800112c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800112e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001132:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001134:	b29b      	uxth	r3, r3
 8001136:	403b      	ands	r3, r7
 8001138:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800113c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001140:	3502      	adds	r5, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d178      	bne.n	8001238 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001146:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800114a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 800114e:	b29b      	uxth	r3, r3
 8001150:	3302      	adds	r3, #2
 8001152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001156:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800115a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800115e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001166:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8001168:	b11b      	cbz	r3, 8001172 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800116a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800116c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800116e:	f001 f985 	bl	800247c <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	4426      	add	r6, r4
 8001176:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800117a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800117e:	b29b      	uxth	r3, r3
 8001180:	3302      	adds	r3, #2
 8001182:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001186:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800118a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 800118e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001190:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001194:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8001196:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001198:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800119a:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800119c:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 8085 	bne.w	80012ae <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80011a4:	f002 fade 	bl	8003764 <HAL_PCD_DataInStageCallback>
 80011a8:	e6b7      	b.n	8000f1a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80011aa:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 80011ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011b8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80011bc:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80011be:	d021      	beq.n	8001204 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011c0:	3202      	adds	r2, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80011c8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80011cc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80011d0:	b136      	cbz	r6, 80011e0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80011d2:	4633      	mov	r3, r6
 80011d4:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011d8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80011dc:	f001 fa60 	bl	80026a0 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80011e0:	eb04 030a 	add.w	r3, r4, sl
 80011e4:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80011e8:	6822      	ldr	r2, [r4, #0]
 80011ea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80011ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011f2:	051b      	lsls	r3, r3, #20
 80011f4:	0d1b      	lsrs	r3, r3, #20
 80011f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001202:	e773      	b.n	80010ec <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001204:	3206      	adds	r2, #6
 8001206:	4413      	add	r3, r2
 8001208:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800120c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001210:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001214:	2e00      	cmp	r6, #0
 8001216:	d0e3      	beq.n	80011e0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001218:	4633      	mov	r3, r6
 800121a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 800121e:	e7db      	b.n	80011d8 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001220:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001224:	4620      	mov	r0, r4
 8001226:	f7ff fd97 	bl	8000d58 <HAL_PCD_EP_Receive>
 800122a:	e779      	b.n	8001120 <HAL_PCD_IRQHandler+0x35c>
 800122c:	ffff8f0f 	.word	0xffff8f0f
 8001230:	ffffbf8f 	.word	0xffffbf8f
 8001234:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001238:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800123c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001246:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800124a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800124c:	d020      	beq.n	8001290 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800124e:	3202      	adds	r2, #2
 8001250:	4413      	add	r3, r2
 8001252:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001256:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800125a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800125e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001262:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001264:	b11b      	cbz	r3, 800126e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001266:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001268:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800126a:	f001 f907 	bl	800247c <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800126e:	19a3      	adds	r3, r4, r6
 8001270:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800127a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800127e:	051b      	lsls	r3, r3, #20
 8001280:	0d1b      	lsrs	r3, r3, #20
 8001282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800128e:	e770      	b.n	8001172 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001290:	3206      	adds	r2, #6
 8001292:	4413      	add	r3, r2
 8001294:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001298:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800129c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80012a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012a4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0e1      	beq.n	800126e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80012aa:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80012ac:	e7dc      	b.n	8001268 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80012ae:	f7ff fd72 	bl	8000d96 <HAL_PCD_EP_Transmit>
 80012b2:	e632      	b.n	8000f1a <HAL_PCD_IRQHandler+0x156>

080012b4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 80012b4:	2201      	movs	r2, #1
{
 80012b6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80012b8:	b24b      	sxtb	r3, r1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80012c0:	bfb5      	itete	lt
 80012c2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80012c6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80012ca:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80012cc:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80012d0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 80012d2:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80012d4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 80012d6:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80012d8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80012da:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80012de:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00e      	beq.n	8001302 <HAL_PCD_EP_SetStall+0x4e>
 80012e4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80012e8:	6800      	ldr	r0, [r0, #0]
 80012ea:	f001 f843 	bl	8002374 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80012ee:	b925      	cbnz	r5, 80012fa <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80012f0:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80012f4:	6820      	ldr	r0, [r4, #0]
 80012f6:	f001 f8bf 	bl	8002478 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80012fa:	2000      	movs	r0, #0
 80012fc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001300:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001302:	2002      	movs	r0, #2
}
 8001304:	bd38      	pop	{r3, r4, r5, pc}

08001306 <HAL_PCD_EP_ClrStall>:
{
 8001306:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001308:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 800130a:	b24b      	sxtb	r3, r1
 800130c:	2b00      	cmp	r3, #0
 800130e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001312:	bfb5      	itete	lt
 8001314:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001318:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800131c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800131e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001322:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001324:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001326:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001328:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800132a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800132e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001330:	2b01      	cmp	r3, #1
 8001332:	d009      	beq.n	8001348 <HAL_PCD_EP_ClrStall+0x42>
 8001334:	2301      	movs	r3, #1
 8001336:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800133a:	6800      	ldr	r0, [r0, #0]
 800133c:	f001 f84c 	bl	80023d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001340:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001344:	4620      	mov	r0, r4
 8001346:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001348:	2002      	movs	r0, #2
}
 800134a:	bd38      	pop	{r3, r4, r5, pc}

0800134c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 800134c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001350:	bf1b      	ittet	ne
 8001352:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001356:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800135a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800135e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001360:	bf08      	it	eq
 8001362:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001366:	b91a      	cbnz	r2, 8001370 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001368:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800136a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 800136c:	2000      	movs	r0, #0
 800136e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001370:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001372:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001374:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001376:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001378:	8103      	strh	r3, [r0, #8]
 800137a:	e7f7      	b.n	800136c <HAL_PCDEx_PMAConfig+0x20>

0800137c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137c:	6803      	ldr	r3, [r0, #0]
{
 800137e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	07db      	lsls	r3, r3, #31
{
 8001384:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	d410      	bmi.n	80013aa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	079f      	lsls	r7, r3, #30
 800138c:	d45e      	bmi.n	800144c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	0719      	lsls	r1, r3, #28
 8001392:	f100 8095 	bmi.w	80014c0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	075a      	lsls	r2, r3, #29
 800139a:	f100 80bf 	bmi.w	800151c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139e:	69ea      	ldr	r2, [r5, #28]
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	f040 812d 	bne.w	8001600 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80013a6:	2000      	movs	r0, #0
 80013a8:	e014      	b.n	80013d4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013aa:	4c90      	ldr	r4, [pc, #576]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013ac:	6863      	ldr	r3, [r4, #4]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d007      	beq.n	80013c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b6:	6863      	ldr	r3, [r4, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x5e>
 80013c0:	6863      	ldr	r3, [r4, #4]
 80013c2:	03de      	lsls	r6, r3, #15
 80013c4:	d509      	bpl.n	80013da <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	039c      	lsls	r4, r3, #14
 80013ca:	d5dd      	bpl.n	8001388 <HAL_RCC_OscConfig+0xc>
 80013cc:	686b      	ldr	r3, [r5, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1da      	bne.n	8001388 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
}
 80013d4:	b002      	add	sp, #8
 80013d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013da:	686b      	ldr	r3, [r5, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d110      	bne.n	8001404 <HAL_RCC_OscConfig+0x88>
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013ea:	f7fe fef1 	bl	80001d0 <HAL_GetTick>
 80013ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	0398      	lsls	r0, r3, #14
 80013f4:	d4c8      	bmi.n	8001388 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f6:	f7fe feeb 	bl	80001d0 <HAL_GetTick>
 80013fa:	1b80      	subs	r0, r0, r6
 80013fc:	2864      	cmp	r0, #100	; 0x64
 80013fe:	d9f7      	bls.n	80013f0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001400:	2003      	movs	r0, #3
 8001402:	e7e7      	b.n	80013d4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	b99b      	cbnz	r3, 800142e <HAL_RCC_OscConfig+0xb2>
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140c:	6023      	str	r3, [r4, #0]
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001416:	f7fe fedb 	bl	80001d0 <HAL_GetTick>
 800141a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	0399      	lsls	r1, r3, #14
 8001420:	d5b2      	bpl.n	8001388 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001422:	f7fe fed5 	bl	80001d0 <HAL_GetTick>
 8001426:	1b80      	subs	r0, r0, r6
 8001428:	2864      	cmp	r0, #100	; 0x64
 800142a:	d9f7      	bls.n	800141c <HAL_RCC_OscConfig+0xa0>
 800142c:	e7e8      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	d103      	bne.n	800143e <HAL_RCC_OscConfig+0xc2>
 8001436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143a:	6023      	str	r3, [r4, #0]
 800143c:	e7d1      	b.n	80013e2 <HAL_RCC_OscConfig+0x66>
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	6023      	str	r3, [r4, #0]
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	e7cd      	b.n	80013e8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800144c:	4c67      	ldr	r4, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800144e:	6863      	ldr	r3, [r4, #4]
 8001450:	f013 0f0c 	tst.w	r3, #12
 8001454:	d007      	beq.n	8001466 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d110      	bne.n	8001482 <HAL_RCC_OscConfig+0x106>
 8001460:	6863      	ldr	r3, [r4, #4]
 8001462:	03da      	lsls	r2, r3, #15
 8001464:	d40d      	bmi.n	8001482 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	079b      	lsls	r3, r3, #30
 800146a:	d502      	bpl.n	8001472 <HAL_RCC_OscConfig+0xf6>
 800146c:	692b      	ldr	r3, [r5, #16]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d1af      	bne.n	80013d2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	696a      	ldr	r2, [r5, #20]
 8001476:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800147a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800147e:	6023      	str	r3, [r4, #0]
 8001480:	e785      	b.n	800138e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001482:	692a      	ldr	r2, [r5, #16]
 8001484:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x274>)
 8001486:	b16a      	cbz	r2, 80014a4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800148c:	f7fe fea0 	bl	80001d0 <HAL_GetTick>
 8001490:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	079f      	lsls	r7, r3, #30
 8001496:	d4ec      	bmi.n	8001472 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7fe fe9a 	bl	80001d0 <HAL_GetTick>
 800149c:	1b80      	subs	r0, r0, r6
 800149e:	2802      	cmp	r0, #2
 80014a0:	d9f7      	bls.n	8001492 <HAL_RCC_OscConfig+0x116>
 80014a2:	e7ad      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80014a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014a6:	f7fe fe93 	bl	80001d0 <HAL_GetTick>
 80014aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	0798      	lsls	r0, r3, #30
 80014b0:	f57f af6d 	bpl.w	800138e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b4:	f7fe fe8c 	bl	80001d0 <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	2802      	cmp	r0, #2
 80014bc:	d9f6      	bls.n	80014ac <HAL_RCC_OscConfig+0x130>
 80014be:	e79f      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c0:	69aa      	ldr	r2, [r5, #24]
 80014c2:	4c4a      	ldr	r4, [pc, #296]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <HAL_RCC_OscConfig+0x278>)
 80014c6:	b1da      	cbz	r2, 8001500 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014cc:	f7fe fe80 	bl	80001d0 <HAL_GetTick>
 80014d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014d4:	079b      	lsls	r3, r3, #30
 80014d6:	d50d      	bpl.n	80014f4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014dc:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80014e4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80014e6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80014e8:	9b01      	ldr	r3, [sp, #4]
 80014ea:	1e5a      	subs	r2, r3, #1
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f9      	bne.n	80014e6 <HAL_RCC_OscConfig+0x16a>
 80014f2:	e750      	b.n	8001396 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7fe fe6c 	bl	80001d0 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9e9      	bls.n	80014d2 <HAL_RCC_OscConfig+0x156>
 80014fe:	e77f      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001500:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001502:	f7fe fe65 	bl	80001d0 <HAL_GetTick>
 8001506:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800150a:	079f      	lsls	r7, r3, #30
 800150c:	f57f af43 	bpl.w	8001396 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001510:	f7fe fe5e 	bl	80001d0 <HAL_GetTick>
 8001514:	1b80      	subs	r0, r0, r6
 8001516:	2802      	cmp	r0, #2
 8001518:	d9f6      	bls.n	8001508 <HAL_RCC_OscConfig+0x18c>
 800151a:	e771      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151c:	4c33      	ldr	r4, [pc, #204]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800151e:	69e3      	ldr	r3, [r4, #28]
 8001520:	00d8      	lsls	r0, r3, #3
 8001522:	d424      	bmi.n	800156e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001524:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	69e3      	ldr	r3, [r4, #28]
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61e3      	str	r3, [r4, #28]
 800152e:	69e3      	ldr	r3, [r4, #28]
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	4e30      	ldr	r6, [pc, #192]	; (80015fc <HAL_RCC_OscConfig+0x280>)
 800153a:	6833      	ldr	r3, [r6, #0]
 800153c:	05d9      	lsls	r1, r3, #23
 800153e:	d518      	bpl.n	8001572 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001540:	68eb      	ldr	r3, [r5, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d126      	bne.n	8001594 <HAL_RCC_OscConfig+0x218>
 8001546:	6a23      	ldr	r3, [r4, #32]
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800154e:	f7fe fe3f 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001556:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	6a23      	ldr	r3, [r4, #32]
 800155a:	079b      	lsls	r3, r3, #30
 800155c:	d53f      	bpl.n	80015de <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800155e:	2f00      	cmp	r7, #0
 8001560:	f43f af1d 	beq.w	800139e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	69e3      	ldr	r3, [r4, #28]
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156a:	61e3      	str	r3, [r4, #28]
 800156c:	e717      	b.n	800139e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800156e:	2700      	movs	r7, #0
 8001570:	e7e2      	b.n	8001538 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	6833      	ldr	r3, [r6, #0]
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800157a:	f7fe fe29 	bl	80001d0 <HAL_GetTick>
 800157e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	6833      	ldr	r3, [r6, #0]
 8001582:	05da      	lsls	r2, r3, #23
 8001584:	d4dc      	bmi.n	8001540 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7fe fe23 	bl	80001d0 <HAL_GetTick>
 800158a:	eba0 0008 	sub.w	r0, r0, r8
 800158e:	2864      	cmp	r0, #100	; 0x64
 8001590:	d9f6      	bls.n	8001580 <HAL_RCC_OscConfig+0x204>
 8001592:	e735      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	b9ab      	cbnz	r3, 80015c2 <HAL_RCC_OscConfig+0x246>
 8001596:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6223      	str	r3, [r4, #32]
 80015a2:	6a23      	ldr	r3, [r4, #32]
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80015aa:	f7fe fe11 	bl	80001d0 <HAL_GetTick>
 80015ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	6a23      	ldr	r3, [r4, #32]
 80015b2:	0798      	lsls	r0, r3, #30
 80015b4:	d5d3      	bpl.n	800155e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7fe fe0b 	bl	80001d0 <HAL_GetTick>
 80015ba:	1b80      	subs	r0, r0, r6
 80015bc:	4540      	cmp	r0, r8
 80015be:	d9f7      	bls.n	80015b0 <HAL_RCC_OscConfig+0x234>
 80015c0:	e71e      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	6a23      	ldr	r3, [r4, #32]
 80015c6:	d103      	bne.n	80015d0 <HAL_RCC_OscConfig+0x254>
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6223      	str	r3, [r4, #32]
 80015ce:	e7ba      	b.n	8001546 <HAL_RCC_OscConfig+0x1ca>
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6223      	str	r3, [r4, #32]
 80015d6:	6a23      	ldr	r3, [r4, #32]
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	e7b6      	b.n	800154c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7fe fdf7 	bl	80001d0 <HAL_GetTick>
 80015e2:	eba0 0008 	sub.w	r0, r0, r8
 80015e6:	42b0      	cmp	r0, r6
 80015e8:	d9b6      	bls.n	8001558 <HAL_RCC_OscConfig+0x1dc>
 80015ea:	e709      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
 80015ec:	40021000 	.word	0x40021000
 80015f0:	42420000 	.word	0x42420000
 80015f4:	42420480 	.word	0x42420480
 80015f8:	2000011c 	.word	0x2000011c
 80015fc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001600:	4c22      	ldr	r4, [pc, #136]	; (800168c <HAL_RCC_OscConfig+0x310>)
 8001602:	6863      	ldr	r3, [r4, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	f43f aee2 	beq.w	80013d2 <HAL_RCC_OscConfig+0x56>
 800160e:	2300      	movs	r3, #0
 8001610:	4e1f      	ldr	r6, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001612:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001614:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001616:	d12b      	bne.n	8001670 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001618:	f7fe fdda 	bl	80001d0 <HAL_GetTick>
 800161c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	0199      	lsls	r1, r3, #6
 8001622:	d41f      	bmi.n	8001664 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001624:	6a2b      	ldr	r3, [r5, #32]
 8001626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800162c:	6862      	ldr	r2, [r4, #4]
 800162e:	68a9      	ldr	r1, [r5, #8]
 8001630:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001634:	430a      	orrs	r2, r1
 8001636:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001638:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800163a:	6862      	ldr	r2, [r4, #4]
 800163c:	430b      	orrs	r3, r1
 800163e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001642:	4313      	orrs	r3, r2
 8001644:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001646:	2301      	movs	r3, #1
 8001648:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800164a:	f7fe fdc1 	bl	80001d0 <HAL_GetTick>
 800164e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	019a      	lsls	r2, r3, #6
 8001654:	f53f aea7 	bmi.w	80013a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7fe fdba 	bl	80001d0 <HAL_GetTick>
 800165c:	1b40      	subs	r0, r0, r5
 800165e:	2802      	cmp	r0, #2
 8001660:	d9f6      	bls.n	8001650 <HAL_RCC_OscConfig+0x2d4>
 8001662:	e6cd      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7fe fdb4 	bl	80001d0 <HAL_GetTick>
 8001668:	1bc0      	subs	r0, r0, r7
 800166a:	2802      	cmp	r0, #2
 800166c:	d9d7      	bls.n	800161e <HAL_RCC_OscConfig+0x2a2>
 800166e:	e6c7      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001670:	f7fe fdae 	bl	80001d0 <HAL_GetTick>
 8001674:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	f57f ae94 	bpl.w	80013a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7fe fda7 	bl	80001d0 <HAL_GetTick>
 8001682:	1b40      	subs	r0, r0, r5
 8001684:	2802      	cmp	r0, #2
 8001686:	d9f6      	bls.n	8001676 <HAL_RCC_OscConfig+0x2fa>
 8001688:	e6ba      	b.n	8001400 <HAL_RCC_OscConfig+0x84>
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	42420060 	.word	0x42420060

08001694 <HAL_RCC_GetSysClockFreq>:
{
 8001694:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001698:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800169a:	ac02      	add	r4, sp, #8
 800169c:	f103 0510 	add.w	r5, r3, #16
 80016a0:	4622      	mov	r2, r4
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	6859      	ldr	r1, [r3, #4]
 80016a6:	3308      	adds	r3, #8
 80016a8:	c203      	stmia	r2!, {r0, r1}
 80016aa:	42ab      	cmp	r3, r5
 80016ac:	4614      	mov	r4, r2
 80016ae:	d1f7      	bne.n	80016a0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016b0:	2301      	movs	r3, #1
 80016b2:	f88d 3004 	strb.w	r3, [sp, #4]
 80016b6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80016b8:	4911      	ldr	r1, [pc, #68]	; (8001700 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016ba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80016be:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80016c0:	f003 020c 	and.w	r2, r3, #12
 80016c4:	2a08      	cmp	r2, #8
 80016c6:	d117      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016c8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80016cc:	a806      	add	r0, sp, #24
 80016ce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016d0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016d2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016d6:	d50c      	bpl.n	80016f2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016d8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016da:	480a      	ldr	r0, [pc, #40]	; (8001704 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016dc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016e0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016e2:	aa06      	add	r2, sp, #24
 80016e4:	4413      	add	r3, r2
 80016e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80016ee:	b007      	add	sp, #28
 80016f0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_RCC_GetSysClockFreq+0x74>)
 80016f4:	4350      	muls	r0, r2
 80016f6:	e7fa      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80016fa:	e7f8      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x5a>
 80016fc:	08003b10 	.word	0x08003b10
 8001700:	40021000 	.word	0x40021000
 8001704:	007a1200 	.word	0x007a1200
 8001708:	003d0900 	.word	0x003d0900

0800170c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800170c:	4a54      	ldr	r2, [pc, #336]	; (8001860 <HAL_RCC_ClockConfig+0x154>)
{
 800170e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001712:	6813      	ldr	r3, [r2, #0]
{
 8001714:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	428b      	cmp	r3, r1
{
 800171c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800171e:	d32a      	bcc.n	8001776 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	6829      	ldr	r1, [r5, #0]
 8001722:	078c      	lsls	r4, r1, #30
 8001724:	d434      	bmi.n	8001790 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	07ca      	lsls	r2, r1, #31
 8001728:	d447      	bmi.n	80017ba <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800172a:	4a4d      	ldr	r2, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x154>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	429e      	cmp	r6, r3
 8001734:	f0c0 8082 	bcc.w	800183c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	682a      	ldr	r2, [r5, #0]
 800173a:	4c4a      	ldr	r4, [pc, #296]	; (8001864 <HAL_RCC_ClockConfig+0x158>)
 800173c:	f012 0f04 	tst.w	r2, #4
 8001740:	f040 8087 	bne.w	8001852 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	0713      	lsls	r3, r2, #28
 8001746:	d506      	bpl.n	8001756 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001748:	6863      	ldr	r3, [r4, #4]
 800174a:	692a      	ldr	r2, [r5, #16]
 800174c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001750:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001754:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001756:	f7ff ff9d 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	4a42      	ldr	r2, [pc, #264]	; (8001868 <HAL_RCC_ClockConfig+0x15c>)
 800175e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	40d8      	lsrs	r0, r3
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_ClockConfig+0x160>)
 8001768:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800176a:	2000      	movs	r0, #0
 800176c:	f7fe fcee 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001770:	2000      	movs	r0, #0
}
 8001772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	f023 0307 	bic.w	r3, r3, #7
 800177c:	430b      	orrs	r3, r1
 800177e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	4299      	cmp	r1, r3
 8001788:	d0ca      	beq.n	8001720 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001792:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001796:	bf1e      	ittt	ne
 8001798:	685a      	ldrne	r2, [r3, #4]
 800179a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800179e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a2:	bf42      	ittt	mi
 80017a4:	685a      	ldrmi	r2, [r3, #4]
 80017a6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80017aa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	68a8      	ldr	r0, [r5, #8]
 80017b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017b4:	4302      	orrs	r2, r0
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	e7b5      	b.n	8001726 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	686a      	ldr	r2, [r5, #4]
 80017bc:	4c29      	ldr	r4, [pc, #164]	; (8001864 <HAL_RCC_ClockConfig+0x158>)
 80017be:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	d11c      	bne.n	80017fe <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	d0df      	beq.n	800178a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d0:	f023 0303 	bic.w	r3, r3, #3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80017d8:	f7fe fcfa 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017dc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80017de:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d114      	bne.n	800180e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e4:	6863      	ldr	r3, [r4, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d09d      	beq.n	800172a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7fe fcef 	bl	80001d0 <HAL_GetTick>
 80017f2:	1bc0      	subs	r0, r0, r7
 80017f4:	4540      	cmp	r0, r8
 80017f6:	d9f5      	bls.n	80017e4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80017f8:	2003      	movs	r0, #3
 80017fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fe:	2a02      	cmp	r2, #2
 8001800:	d102      	bne.n	8001808 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001806:	e7df      	b.n	80017c8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	f013 0f02 	tst.w	r3, #2
 800180c:	e7dc      	b.n	80017c8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180e:	2b02      	cmp	r3, #2
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001812:	6863      	ldr	r3, [r4, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d086      	beq.n	800172a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7fe fcd8 	bl	80001d0 <HAL_GetTick>
 8001820:	1bc0      	subs	r0, r0, r7
 8001822:	4540      	cmp	r0, r8
 8001824:	d9f5      	bls.n	8001812 <HAL_RCC_ClockConfig+0x106>
 8001826:	e7e7      	b.n	80017f8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7fe fcd2 	bl	80001d0 <HAL_GetTick>
 800182c:	1bc0      	subs	r0, r0, r7
 800182e:	4540      	cmp	r0, r8
 8001830:	d8e2      	bhi.n	80017f8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001832:	6863      	ldr	r3, [r4, #4]
 8001834:	f013 0f0c 	tst.w	r3, #12
 8001838:	d1f6      	bne.n	8001828 <HAL_RCC_ClockConfig+0x11c>
 800183a:	e776      	b.n	800172a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	f023 0307 	bic.w	r3, r3, #7
 8001842:	4333      	orrs	r3, r6
 8001844:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	429e      	cmp	r6, r3
 800184e:	d19c      	bne.n	800178a <HAL_RCC_ClockConfig+0x7e>
 8001850:	e772      	b.n	8001738 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001852:	6863      	ldr	r3, [r4, #4]
 8001854:	68e9      	ldr	r1, [r5, #12]
 8001856:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800185a:	430b      	orrs	r3, r1
 800185c:	6063      	str	r3, [r4, #4]
 800185e:	e771      	b.n	8001744 <HAL_RCC_ClockConfig+0x38>
 8001860:	40022000 	.word	0x40022000
 8001864:	40021000 	.word	0x40021000
 8001868:	08003b2a 	.word	0x08003b2a
 800186c:	2000011c 	.word	0x2000011c

08001870 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001870:	6803      	ldr	r3, [r0, #0]
{
 8001872:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001876:	07d9      	lsls	r1, r3, #31
{
 8001878:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800187a:	d520      	bpl.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187c:	4c35      	ldr	r4, [pc, #212]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800187e:	69e3      	ldr	r3, [r4, #28]
 8001880:	00da      	lsls	r2, r3, #3
 8001882:	d432      	bmi.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001884:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	69e3      	ldr	r3, [r4, #28]
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	61e3      	str	r3, [r4, #28]
 800188e:	69e3      	ldr	r3, [r4, #28]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4e2f      	ldr	r6, [pc, #188]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800189a:	6833      	ldr	r3, [r6, #0]
 800189c:	05db      	lsls	r3, r3, #23
 800189e:	d526      	bpl.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018a0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018a2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018a6:	d136      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80018a8:	6a23      	ldr	r3, [r4, #32]
 80018aa:	686a      	ldr	r2, [r5, #4]
 80018ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b0:	4313      	orrs	r3, r2
 80018b2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b4:	b11f      	cbz	r7, 80018be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b6:	69e3      	ldr	r3, [r4, #28]
 80018b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018bc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018be:	6828      	ldr	r0, [r5, #0]
 80018c0:	0783      	lsls	r3, r0, #30
 80018c2:	d506      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018c6:	68a9      	ldr	r1, [r5, #8]
 80018c8:	6853      	ldr	r3, [r2, #4]
 80018ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018ce:	430b      	orrs	r3, r1
 80018d0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018d2:	f010 0010 	ands.w	r0, r0, #16
 80018d6:	d01b      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018da:	68e9      	ldr	r1, [r5, #12]
 80018dc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80018de:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6053      	str	r3, [r2, #4]
 80018e8:	e012      	b.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2700      	movs	r7, #0
 80018ec:	e7d4      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ee:	6833      	ldr	r3, [r6, #0]
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018f6:	f7fe fc6b 	bl	80001d0 <HAL_GetTick>
 80018fa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	6833      	ldr	r3, [r6, #0]
 80018fe:	05d8      	lsls	r0, r3, #23
 8001900:	d4ce      	bmi.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7fe fc65 	bl	80001d0 <HAL_GetTick>
 8001906:	eba0 0008 	sub.w	r0, r0, r8
 800190a:	2864      	cmp	r0, #100	; 0x64
 800190c:	d9f6      	bls.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
}
 8001910:	b002      	add	sp, #8
 8001912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001916:	686a      	ldr	r2, [r5, #4]
 8001918:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800191c:	4293      	cmp	r3, r2
 800191e:	d0c3      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001920:	2001      	movs	r0, #1
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001924:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001926:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001928:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800192a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800192e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001930:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001932:	07d9      	lsls	r1, r3, #31
 8001934:	d5b8      	bpl.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001936:	f7fe fc4b 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800193e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	6a23      	ldr	r3, [r4, #32]
 8001942:	079a      	lsls	r2, r3, #30
 8001944:	d4b0      	bmi.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7fe fc43 	bl	80001d0 <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	4540      	cmp	r0, r8
 800194e:	d9f7      	bls.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001950:	e7dd      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	42420440 	.word	0x42420440

08001960 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001960:	6a03      	ldr	r3, [r0, #32]
{
 8001962:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800196a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800196c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800196e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001970:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001972:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001976:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001978:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800197a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800197e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001980:	4d0a      	ldr	r5, [pc, #40]	; (80019ac <TIM_OC1_SetConfig+0x4c>)
 8001982:	42a8      	cmp	r0, r5
 8001984:	d10b      	bne.n	800199e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001986:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001988:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800198c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800198e:	698e      	ldr	r6, [r1, #24]
 8001990:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001992:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001996:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001998:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800199c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800199e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019a0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80019a2:	684a      	ldr	r2, [r1, #4]
 80019a4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019a6:	6203      	str	r3, [r0, #32]
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	bf00      	nop
 80019ac:	40012c00 	.word	0x40012c00

080019b0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019b0:	6a03      	ldr	r3, [r0, #32]
{
 80019b2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80019c2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80019c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80019ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80019d2:	4d0b      	ldr	r5, [pc, #44]	; (8001a00 <TIM_OC3_SetConfig+0x50>)
 80019d4:	42a8      	cmp	r0, r5
 80019d6:	d10d      	bne.n	80019f4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019d8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80019da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019e2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80019e4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019e6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019ea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80019ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019f0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019f6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80019f8:	684a      	ldr	r2, [r1, #4]
 80019fa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019fc:	6203      	str	r3, [r0, #32]
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	40012c00 	.word	0x40012c00

08001a04 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a04:	6a03      	ldr	r3, [r0, #32]
{
 8001a06:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a0e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a10:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a12:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a16:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a1e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a28:	4d06      	ldr	r5, [pc, #24]	; (8001a44 <TIM_OC4_SetConfig+0x40>)
 8001a2a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001a2c:	bf02      	ittt	eq
 8001a2e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a30:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001a34:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a3a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a3c:	684a      	ldr	r2, [r1, #4]
 8001a3e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a40:	6203      	str	r3, [r0, #32]
 8001a42:	bd30      	pop	{r4, r5, pc}
 8001a44:	40012c00 	.word	0x40012c00

08001a48 <HAL_TIM_PWM_MspInit>:
 8001a48:	4770      	bx	lr

08001a4a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001a4a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001a4e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	f04f 0302 	mov.w	r3, #2
 8001a56:	d01c      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0x48>
 8001a58:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a5e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001a60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001a64:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a66:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001a6a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001a6e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a70:	680a      	ldr	r2, [r1, #0]
 8001a72:	2a40      	cmp	r2, #64	; 0x40
 8001a74:	d079      	beq.n	8001b6a <HAL_TIM_ConfigClockSource+0x120>
 8001a76:	d819      	bhi.n	8001aac <HAL_TIM_ConfigClockSource+0x62>
 8001a78:	2a10      	cmp	r2, #16
 8001a7a:	f000 8093 	beq.w	8001ba4 <HAL_TIM_ConfigClockSource+0x15a>
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_TIM_ConfigClockSource+0x4c>
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	f000 8089 	beq.w	8001b98 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001a92:	4618      	mov	r0, r3
}
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001a96:	2a20      	cmp	r2, #32
 8001a98:	f000 808a 	beq.w	8001bb0 <HAL_TIM_ConfigClockSource+0x166>
 8001a9c:	2a30      	cmp	r2, #48	; 0x30
 8001a9e:	d1f2      	bne.n	8001a86 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001aa0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001aa6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001aaa:	e036      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001aac:	2a70      	cmp	r2, #112	; 0x70
 8001aae:	d036      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0xd4>
 8001ab0:	d81b      	bhi.n	8001aea <HAL_TIM_ConfigClockSource+0xa0>
 8001ab2:	2a50      	cmp	r2, #80	; 0x50
 8001ab4:	d042      	beq.n	8001b3c <HAL_TIM_ConfigClockSource+0xf2>
 8001ab6:	2a60      	cmp	r2, #96	; 0x60
 8001ab8:	d1e5      	bne.n	8001a86 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aba:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001abc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001abe:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ac2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ac4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ac6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001aca:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ace:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ad2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ad6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001ada:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001adc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001ade:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ae0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ae4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001ae8:	e017      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001aea:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001aee:	d011      	beq.n	8001b14 <HAL_TIM_ConfigClockSource+0xca>
 8001af0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001af4:	d1c7      	bne.n	8001a86 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001af6:	688a      	ldr	r2, [r1, #8]
 8001af8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001afa:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001afc:	68c9      	ldr	r1, [r1, #12]
 8001afe:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b00:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b08:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b0a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b12:	e002      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	e7b3      	b.n	8001a86 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b1e:	688a      	ldr	r2, [r1, #8]
 8001b20:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001b22:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b24:	68c9      	ldr	r1, [r1, #12]
 8001b26:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b28:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b30:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001b32:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001b34:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b36:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001b3a:	e7ee      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b3c:	684c      	ldr	r4, [r1, #4]
 8001b3e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001b40:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b42:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b44:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b48:	f025 0501 	bic.w	r5, r5, #1
 8001b4c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b4e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001b50:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b56:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b5c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001b5e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b64:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001b68:	e7d7      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b6a:	684c      	ldr	r4, [r1, #4]
 8001b6c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001b6e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b70:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b72:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b76:	f025 0501 	bic.w	r5, r5, #1
 8001b7a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b7c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001b7e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b84:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b8a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001b8c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b92:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001b96:	e7c0      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001b98:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b9e:	f042 0207 	orr.w	r2, r2, #7
 8001ba2:	e7ba      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001ba4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ba6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001baa:	f042 0217 	orr.w	r2, r2, #23
 8001bae:	e7b4      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001bb0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bb6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001bba:	e7ae      	b.n	8001b1a <HAL_TIM_ConfigClockSource+0xd0>

08001bbc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bbc:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001bbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc0:	4290      	cmp	r0, r2
 8001bc2:	d00a      	beq.n	8001bda <TIM_Base_SetConfig+0x1e>
 8001bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bc8:	d007      	beq.n	8001bda <TIM_Base_SetConfig+0x1e>
 8001bca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001bce:	4290      	cmp	r0, r2
 8001bd0:	d003      	beq.n	8001bda <TIM_Base_SetConfig+0x1e>
 8001bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bd6:	4290      	cmp	r0, r2
 8001bd8:	d115      	bne.n	8001c06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001bda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001be0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <TIM_Base_SetConfig+0x6c>)
 8001be4:	4290      	cmp	r0, r2
 8001be6:	d00a      	beq.n	8001bfe <TIM_Base_SetConfig+0x42>
 8001be8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bec:	d007      	beq.n	8001bfe <TIM_Base_SetConfig+0x42>
 8001bee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001bf2:	4290      	cmp	r0, r2
 8001bf4:	d003      	beq.n	8001bfe <TIM_Base_SetConfig+0x42>
 8001bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bfa:	4290      	cmp	r0, r2
 8001bfc:	d103      	bne.n	8001c06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bfe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c04:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c06:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c10:	688b      	ldr	r3, [r1, #8]
 8001c12:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c14:	680b      	ldr	r3, [r1, #0]
 8001c16:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <TIM_Base_SetConfig+0x6c>)
 8001c1a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001c1c:	bf04      	itt	eq
 8001c1e:	690b      	ldreq	r3, [r1, #16]
 8001c20:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001c22:	2301      	movs	r3, #1
 8001c24:	6143      	str	r3, [r0, #20]
 8001c26:	4770      	bx	lr
 8001c28:	40012c00 	.word	0x40012c00

08001c2c <HAL_TIM_Base_Init>:
{
 8001c2c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c2e:	4604      	mov	r4, r0
 8001c30:	b1a0      	cbz	r0, 8001c5c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c3a:	b91b      	cbnz	r3, 8001c44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c40:	f001 fc68 	bl	8003514 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c46:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001c48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4c:	1d21      	adds	r1, r4, #4
 8001c4e:	f7ff ffb5 	bl	8001bbc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c52:	2301      	movs	r3, #1
  return HAL_OK;
 8001c54:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001c56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
}
 8001c5e:	bd10      	pop	{r4, pc}

08001c60 <HAL_TIM_PWM_Init>:
{
 8001c60:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c62:	4604      	mov	r4, r0
 8001c64:	b1a0      	cbz	r0, 8001c90 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c6e:	b91b      	cbnz	r3, 8001c78 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001c74:	f7ff fee8 	bl	8001a48 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001c7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c80:	1d21      	adds	r1, r4, #4
 8001c82:	f7ff ff9b 	bl	8001bbc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c86:	2301      	movs	r3, #1
  return HAL_OK;
 8001c88:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001c8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c90:	2001      	movs	r0, #1
}
 8001c92:	bd10      	pop	{r4, pc}

08001c94 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c94:	6a03      	ldr	r3, [r0, #32]
{
 8001c96:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c98:	f023 0310 	bic.w	r3, r3, #16
 8001c9c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001ca0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ca2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ca4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ca6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001caa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001cae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001cb0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001cb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001cb8:	4d0b      	ldr	r5, [pc, #44]	; (8001ce8 <TIM_OC2_SetConfig+0x54>)
 8001cba:	42a8      	cmp	r0, r5
 8001cbc:	d10d      	bne.n	8001cda <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cbe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001cc8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001cca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ccc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001cd0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001cd6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001cda:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001cdc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001cde:	684a      	ldr	r2, [r1, #4]
 8001ce0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001ce2:	6203      	str	r3, [r0, #32]
 8001ce4:	bd70      	pop	{r4, r5, r6, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40012c00 	.word	0x40012c00

08001cec <HAL_TIM_PWM_ConfigChannel>:
{
 8001cec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001cee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001cf2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	f04f 0002 	mov.w	r0, #2
 8001cfa:	d025      	beq.n	8001d48 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001cfc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001d06:	2a0c      	cmp	r2, #12
 8001d08:	d818      	bhi.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0x50>
 8001d0a:	e8df f002 	tbb	[pc, r2]
 8001d0e:	1707      	.short	0x1707
 8001d10:	171e1717 	.word	0x171e1717
 8001d14:	172f1717 	.word	0x172f1717
 8001d18:	1717      	.short	0x1717
 8001d1a:	40          	.byte	0x40
 8001d1b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d1c:	6820      	ldr	r0, [r4, #0]
 8001d1e:	f7ff fe1f 	bl	8001960 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d22:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d24:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	f042 0208 	orr.w	r2, r2, #8
 8001d2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	f022 0204 	bic.w	r2, r2, #4
 8001d34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001d3a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d3c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d44:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d48:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d4a:	6820      	ldr	r0, [r4, #0]
 8001d4c:	f7ff ffa2 	bl	8001c94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d50:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001d52:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d6a:	e7e6      	b.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d6c:	6820      	ldr	r0, [r4, #0]
 8001d6e:	f7ff fe1f 	bl	80019b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d72:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d74:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	f042 0208 	orr.w	r2, r2, #8
 8001d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	f022 0204 	bic.w	r2, r2, #4
 8001d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001d8a:	61da      	str	r2, [r3, #28]
    break;
 8001d8c:	e7d6      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d8e:	6820      	ldr	r0, [r4, #0]
 8001d90:	f7ff fe38 	bl	8001a04 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d94:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001d96:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dae:	e7ec      	b.n	8001d8a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001db0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001db2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001db4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001db6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001db8:	ea23 0304 	bic.w	r3, r3, r4
 8001dbc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001dbe:	6a03      	ldr	r3, [r0, #32]
 8001dc0:	408a      	lsls	r2, r1
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	6202      	str	r2, [r0, #32]
 8001dc6:	bd10      	pop	{r4, pc}

08001dc8 <HAL_TIM_PWM_Start>:
{
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	6800      	ldr	r0, [r0, #0]
 8001dd0:	f7ff ffee 	bl	8001db0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_TIM_PWM_Start+0x28>)
}
 8001dd8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dda:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001ddc:	bf02      	ittt	eq
 8001dde:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001de0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001de4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	40012c00 	.word	0x40012c00

08001df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001df4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d01f      	beq.n	8001e3c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001dfc:	68cb      	ldr	r3, [r1, #12]
 8001dfe:	688a      	ldr	r2, [r1, #8]
 8001e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001e06:	684a      	ldr	r2, [r1, #4]
 8001e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001e0e:	680a      	ldr	r2, [r1, #0]
 8001e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001e16:	690a      	ldr	r2, [r1, #16]
 8001e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001e1e:	694a      	ldr	r2, [r1, #20]
 8001e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001e26:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001e28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e2c:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001e2e:	6802      	ldr	r2, [r0, #0]
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001e32:	2300      	movs	r3, #0
 8001e34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001e3c:	2002      	movs	r0, #2
}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001e40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001e44:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	f04f 0302 	mov.w	r3, #2
 8001e4c:	d018      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001e4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e52:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001e54:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e56:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e58:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e5e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4322      	orrs	r2, r4
 8001e64:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e6c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e80:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e82:	bd10      	pop	{r4, pc}

08001e84 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001e84:	b084      	sub	sp, #16
 8001e86:	a801      	add	r0, sp, #4
 8001e88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e8c:	b004      	add	sp, #16
 8001e8e:	2000      	movs	r0, #0
 8001e90:	4770      	bx	lr

08001e92 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001e92:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001e9c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	4770      	bx	lr

08001ea4 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001ea4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001ea8:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001eac:	045b      	lsls	r3, r3, #17
 8001eae:	0c5b      	lsrs	r3, r3, #17
 8001eb0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	4770      	bx	lr

08001eb8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001eb8:	2000      	movs	r0, #0
 8001eba:	4770      	bx	lr

08001ebc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	b510      	push	{r4, lr}
 8001ec0:	ac03      	add	r4, sp, #12
 8001ec2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001eca:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001ed2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001ed6:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001eda:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001ede:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001ee2:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001eea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4770      	bx	lr
	...

08001ef4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001ef4:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001ef6:	78cb      	ldrb	r3, [r1, #3]
 8001ef8:	780a      	ldrb	r2, [r1, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d80f      	bhi.n	8001f1e <USB_ActivateEndpoint+0x2a>
 8001efe:	e8df f003 	tbb	[pc, r3]
 8001f02:	6402      	.short	0x6402
 8001f04:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001f06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001f1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001f1e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001f22:	780c      	ldrb	r4, [r1, #0]
 8001f24:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001f28:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001f2c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001f30:	401a      	ands	r2, r3
 8001f32:	432a      	orrs	r2, r5
 8001f34:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001f38:	7a8a      	ldrb	r2, [r1, #10]
 8001f3a:	780d      	ldrb	r5, [r1, #0]
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	f040 8097 	bne.w	8002070 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001f42:	784c      	ldrb	r4, [r1, #1]
 8001f44:	888a      	ldrh	r2, [r1, #4]
 8001f46:	2c00      	cmp	r4, #0
 8001f48:	d04a      	beq.n	8001fe0 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001f4a:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001f4e:	0852      	lsrs	r2, r2, #1
 8001f50:	b2a4      	uxth	r4, r4
 8001f52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001f56:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001f5a:	0052      	lsls	r2, r2, #1
 8001f5c:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f60:	780c      	ldrb	r4, [r1, #0]
 8001f62:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001f66:	0652      	lsls	r2, r2, #25
 8001f68:	d508      	bpl.n	8001f7c <USB_ActivateEndpoint+0x88>
 8001f6a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f78:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001f7c:	780a      	ldrb	r2, [r1, #0]
 8001f7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f8a:	041b      	lsls	r3, r3, #16
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001fa2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fa6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	041b      	lsls	r3, r3, #16
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	e7b2      	b.n	8001f1a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001fb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fb8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001fc8:	e7a7      	b.n	8001f1a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001fca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fde:	e79c      	b.n	8001f1a <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001fe0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001fe4:	0852      	lsrs	r2, r2, #1
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3304      	adds	r3, #4
 8001fea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001fee:	0052      	lsls	r2, r2, #1
 8001ff0:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001ff4:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001ff8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ffc:	690d      	ldr	r5, [r1, #16]
 8001ffe:	b292      	uxth	r2, r2
 8002000:	780b      	ldrb	r3, [r1, #0]
 8002002:	3206      	adds	r2, #6
 8002004:	2d3e      	cmp	r5, #62	; 0x3e
 8002006:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800200a:	d929      	bls.n	8002060 <USB_ActivateEndpoint+0x16c>
 800200c:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8002010:	06eb      	lsls	r3, r5, #27
 8002012:	bf04      	itt	eq
 8002014:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 8002018:	b29e      	uxtheq	r6, r3
 800201a:	4b6e      	ldr	r3, [pc, #440]	; (80021d4 <USB_ActivateEndpoint+0x2e0>)
 800201c:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002020:	b29b      	uxth	r3, r3
 8002022:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002026:	780a      	ldrb	r2, [r1, #0]
 8002028:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800202c:	045e      	lsls	r6, r3, #17
 800202e:	d50b      	bpl.n	8002048 <USB_ActivateEndpoint+0x154>
 8002030:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002038:	051b      	lsls	r3, r3, #20
 800203a:	0d1b      	lsrs	r3, r3, #20
 800203c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002048:	780a      	ldrb	r2, [r1, #0]
 800204a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800204e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800205e:	e798      	b.n	8001f92 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002060:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002064:	07ed      	lsls	r5, r5, #31
 8002066:	bf44      	itt	mi
 8002068:	3301      	addmi	r3, #1
 800206a:	b29b      	uxthmi	r3, r3
 800206c:	029b      	lsls	r3, r3, #10
 800206e:	e7d7      	b.n	8002020 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002070:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002074:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002078:	0512      	lsls	r2, r2, #20
 800207a:	0d12      	lsrs	r2, r2, #20
 800207c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002080:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002084:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002088:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800208c:	780c      	ldrb	r4, [r1, #0]
 800208e:	b292      	uxth	r2, r2
 8002090:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002094:	88cc      	ldrh	r4, [r1, #6]
 8002096:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800209a:	0864      	lsrs	r4, r4, #1
 800209c:	0064      	lsls	r4, r4, #1
 800209e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 80020a2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80020a6:	780c      	ldrb	r4, [r1, #0]
 80020a8:	b292      	uxth	r2, r2
 80020aa:	3204      	adds	r2, #4
 80020ac:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80020b0:	890c      	ldrh	r4, [r1, #8]
 80020b2:	0864      	lsrs	r4, r4, #1
 80020b4:	0064      	lsls	r4, r4, #1
 80020b6:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 80020ba:	784a      	ldrb	r2, [r1, #1]
 80020bc:	780c      	ldrb	r4, [r1, #0]
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d147      	bne.n	8002152 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020c2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80020c6:	0455      	lsls	r5, r2, #17
 80020c8:	d508      	bpl.n	80020dc <USB_ActivateEndpoint+0x1e8>
 80020ca:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80020ce:	4013      	ands	r3, r2
 80020d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020dc:	780a      	ldrb	r2, [r1, #0]
 80020de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020e2:	065c      	lsls	r4, r3, #25
 80020e4:	d50b      	bpl.n	80020fe <USB_ActivateEndpoint+0x20a>
 80020e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ee:	051b      	lsls	r3, r3, #20
 80020f0:	0d1b      	lsrs	r3, r3, #20
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80020fe:	780a      	ldrb	r2, [r1, #0]
 8002100:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002108:	051b      	lsls	r3, r3, #20
 800210a:	0d1b      	lsrs	r3, r3, #20
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002114:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002118:	f248 0280 	movw	r2, #32896	; 0x8080
 800211c:	780c      	ldrb	r4, [r1, #0]
 800211e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002132:	4313      	orrs	r3, r2
 8002134:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002138:	7809      	ldrb	r1, [r1, #0]
 800213a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800213e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002146:	041b      	lsls	r3, r3, #16
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	4313      	orrs	r3, r2
 800214c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002150:	e725      	b.n	8001f9e <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002152:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002156:	0452      	lsls	r2, r2, #17
 8002158:	d508      	bpl.n	800216c <USB_ActivateEndpoint+0x278>
 800215a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800215e:	4013      	ands	r3, r2
 8002160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002168:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800216c:	780a      	ldrb	r2, [r1, #0]
 800216e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002172:	065b      	lsls	r3, r3, #25
 8002174:	d50b      	bpl.n	800218e <USB_ActivateEndpoint+0x29a>
 8002176:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800217a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217e:	051b      	lsls	r3, r3, #20
 8002180:	0d1b      	lsrs	r3, r3, #20
 8002182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002186:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800218a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800218e:	780a      	ldrb	r2, [r1, #0]
 8002190:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	0d1b      	lsrs	r3, r3, #20
 800219c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80021a8:	f248 0280 	movw	r2, #32896	; 0x8080
 80021ac:	780c      	ldrb	r4, [r1, #0]
 80021ae:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80021b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	4313      	orrs	r3, r2
 80021c0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80021c4:	7809      	ldrb	r1, [r1, #0]
 80021c6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80021ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	e7b8      	b.n	8002146 <USB_ActivateEndpoint+0x252>
 80021d4:	ffff8000 	.word	0xffff8000

080021d8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80021d8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80021da:	7a8c      	ldrb	r4, [r1, #10]
 80021dc:	784a      	ldrb	r2, [r1, #1]
 80021de:	780b      	ldrb	r3, [r1, #0]
 80021e0:	bbcc      	cbnz	r4, 8002256 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 80021e2:	b302      	cbz	r2, 8002226 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021e8:	0652      	lsls	r2, r2, #25
 80021ea:	d50b      	bpl.n	8002204 <USB_DeactivateEndpoint+0x2c>
 80021ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021f4:	0512      	lsls	r2, r2, #20
 80021f6:	0d12      	lsrs	r2, r2, #20
 80021f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002200:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002204:	780a      	ldrb	r2, [r1, #0]
 8002206:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800220a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002222:	2000      	movs	r0, #0
 8002224:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002226:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800222a:	0454      	lsls	r4, r2, #17
 800222c:	d50b      	bpl.n	8002246 <USB_DeactivateEndpoint+0x6e>
 800222e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002232:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002236:	0512      	lsls	r2, r2, #20
 8002238:	0d12      	lsrs	r2, r2, #20
 800223a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800223e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002242:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002246:	780a      	ldrb	r2, [r1, #0]
 8002248:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800224c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002254:	e7dd      	b.n	8002212 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8002256:	2a00      	cmp	r2, #0
 8002258:	d148      	bne.n	80022ec <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800225a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800225e:	0452      	lsls	r2, r2, #17
 8002260:	d50b      	bpl.n	800227a <USB_DeactivateEndpoint+0xa2>
 8002262:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002266:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800226a:	0512      	lsls	r2, r2, #20
 800226c:	0d12      	lsrs	r2, r2, #20
 800226e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002272:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002276:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800227a:	780a      	ldrb	r2, [r1, #0]
 800227c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002280:	065c      	lsls	r4, r3, #25
 8002282:	d50b      	bpl.n	800229c <USB_DeactivateEndpoint+0xc4>
 8002284:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	0d1b      	lsrs	r3, r3, #20
 8002290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002298:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800229c:	780a      	ldrb	r2, [r1, #0]
 800229e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a6:	051b      	lsls	r3, r3, #20
 80022a8:	0d1b      	lsrs	r3, r3, #20
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022b6:	f248 0280 	movw	r2, #32896	; 0x8080
 80022ba:	780c      	ldrb	r4, [r1, #0]
 80022bc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80022c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80022d2:	7809      	ldrb	r1, [r1, #0]
 80022d4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80022d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80022ea:	e79a      	b.n	8002222 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022f0:	0452      	lsls	r2, r2, #17
 80022f2:	d50b      	bpl.n	800230c <USB_DeactivateEndpoint+0x134>
 80022f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022fc:	0512      	lsls	r2, r2, #20
 80022fe:	0d12      	lsrs	r2, r2, #20
 8002300:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002308:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800230c:	780a      	ldrb	r2, [r1, #0]
 800230e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002312:	065b      	lsls	r3, r3, #25
 8002314:	d50b      	bpl.n	800232e <USB_DeactivateEndpoint+0x156>
 8002316:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800231a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231e:	051b      	lsls	r3, r3, #20
 8002320:	0d1b      	lsrs	r3, r3, #20
 8002322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800232a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800232e:	780a      	ldrb	r2, [r1, #0]
 8002330:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	0d1b      	lsrs	r3, r3, #20
 800233c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002348:	f248 0280 	movw	r2, #32896	; 0x8080
 800234c:	780c      	ldrb	r4, [r1, #0]
 800234e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	4313      	orrs	r3, r2
 8002360:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002364:	7809      	ldrb	r1, [r1, #0]
 8002366:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800236a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	e7b5      	b.n	80022e0 <USB_DeactivateEndpoint+0x108>

08002374 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002374:	780a      	ldrb	r2, [r1, #0]
 8002376:	b98a      	cbnz	r2, 800239c <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002378:	8803      	ldrh	r3, [r0, #0]
 800237a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800237e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800238a:	f083 0310 	eor.w	r3, r3, #16
 800238e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002396:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002398:	2000      	movs	r0, #0
 800239a:	4770      	bx	lr
    if (ep->is_in)
 800239c:	784b      	ldrb	r3, [r1, #1]
 800239e:	b183      	cbz	r3, 80023c2 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80023a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80023b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80023c0:	e7ea      	b.n	8002398 <USB_EPSetStall+0x24>
 80023c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ce:	041b      	lsls	r3, r3, #16
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023d6:	e7ed      	b.n	80023b4 <USB_EPSetStall+0x40>

080023d8 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80023d8:	784b      	ldrb	r3, [r1, #1]
 80023da:	780a      	ldrb	r2, [r1, #0]
 80023dc:	b313      	cbz	r3, 8002424 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023e2:	065b      	lsls	r3, r3, #25
 80023e4:	d50b      	bpl.n	80023fe <USB_EPClearStall+0x26>
 80023e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ee:	051b      	lsls	r3, r3, #20
 80023f0:	0d1b      	lsrs	r3, r3, #20
 80023f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80023fe:	780a      	ldrb	r2, [r1, #0]
 8002400:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002420:	2000      	movs	r0, #0
 8002422:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002424:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002428:	045b      	lsls	r3, r3, #17
 800242a:	d50b      	bpl.n	8002444 <USB_EPClearStall+0x6c>
 800242c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002434:	051b      	lsls	r3, r3, #20
 8002436:	0d1b      	lsrs	r3, r3, #20
 8002438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002444:	780a      	ldrb	r2, [r1, #0]
 8002446:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800244a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800245a:	e7db      	b.n	8002414 <USB_EPClearStall+0x3c>

0800245c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 800245c:	b911      	cbnz	r1, 8002464 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002464:	2000      	movs	r0, #0
 8002466:	4770      	bx	lr

08002468 <USB_DevConnect>:
 8002468:	2000      	movs	r0, #0
 800246a:	4770      	bx	lr

0800246c <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800246c:	2000      	movs	r0, #0
 800246e:	4770      	bx	lr

08002470 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002470:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002474:	b280      	uxth	r0, r0
 8002476:	4770      	bx	lr

08002478 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002478:	2000      	movs	r0, #0
 800247a:	4770      	bx	lr

0800247c <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800247c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 800247e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002480:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002482:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002486:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002488:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800248c:	42a3      	cmp	r3, r4
 800248e:	d100      	bne.n	8002492 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002490:	bd10      	pop	{r4, pc}
 8002492:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002496:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 800249a:	3401      	adds	r4, #1
 800249c:	e7f6      	b.n	800248c <USB_WritePMA+0x10>
	...

080024a0 <USB_EPStartXfer>:
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 80024a4:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 80024a6:	7849      	ldrb	r1, [r1, #1]
{
 80024a8:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 80024aa:	2901      	cmp	r1, #1
 80024ac:	6933      	ldr	r3, [r6, #16]
 80024ae:	7ab0      	ldrb	r0, [r6, #10]
 80024b0:	d166      	bne.n	8002580 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 80024b2:	429a      	cmp	r2, r3
 80024b4:	461c      	mov	r4, r3
      ep->xfer_len =0;
 80024b6:	bf9b      	ittet	ls
 80024b8:	2300      	movls	r3, #0
 80024ba:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 80024bc:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 80024be:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 80024c0:	bf88      	it	hi
 80024c2:	61b2      	strhi	r2, [r6, #24]
 80024c4:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 80024c6:	bb10      	cbnz	r0, 800250e <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80024c8:	88b2      	ldrh	r2, [r6, #4]
 80024ca:	6971      	ldr	r1, [r6, #20]
 80024cc:	4628      	mov	r0, r5
 80024ce:	f7ff ffd5 	bl	800247c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80024d2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80024d6:	7832      	ldrb	r2, [r6, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3302      	adds	r3, #2
 80024dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80024e0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80024e4:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80024e8:	7832      	ldrb	r2, [r6, #0]
 80024ea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80024ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002506:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 800250a:	2000      	movs	r0, #0
 800250c:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800250e:	7832      	ldrb	r2, [r6, #0]
 8002510:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002514:	00d2      	lsls	r2, r2, #3
 8002516:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800251a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800251e:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002520:	d01a      	beq.n	8002558 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002522:	3102      	adds	r1, #2
 8002524:	440a      	add	r2, r1
 8002526:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800252a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 800252e:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002530:	6971      	ldr	r1, [r6, #20]
 8002532:	4628      	mov	r0, r5
 8002534:	f7ff ffa2 	bl	800247c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002538:	7873      	ldrb	r3, [r6, #1]
 800253a:	7832      	ldrb	r2, [r6, #0]
 800253c:	b99b      	cbnz	r3, 8002566 <USB_EPStartXfer+0xc6>
 800253e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002546:	051b      	lsls	r3, r3, #20
 8002548:	0d1b      	lsrs	r3, r3, #20
 800254a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002552:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002556:	e7c7      	b.n	80024e8 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002558:	440a      	add	r2, r1
 800255a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800255e:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8002562:	88f2      	ldrh	r2, [r6, #6]
 8002564:	e7e4      	b.n	8002530 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002566:	2b01      	cmp	r3, #1
 8002568:	d1be      	bne.n	80024e8 <USB_EPStartXfer+0x48>
 800256a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800256e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002572:	051b      	lsls	r3, r3, #20
 8002574:	0d1b      	lsrs	r3, r3, #20
 8002576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800257e:	e7e8      	b.n	8002552 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002580:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8002582:	bf93      	iteet	ls
 8002584:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002586:	1ad2      	subhi	r2, r2, r3
 8002588:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 800258a:	61b3      	strls	r3, [r6, #24]
 800258c:	bf98      	it	ls
 800258e:	4613      	movls	r3, r2
 8002590:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8002592:	bb70      	cbnz	r0, 80025f2 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002594:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002598:	2b3e      	cmp	r3, #62	; 0x3e
 800259a:	b289      	uxth	r1, r1
 800259c:	f101 0106 	add.w	r1, r1, #6
 80025a0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80025a4:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80025a8:	d918      	bls.n	80025dc <USB_EPStartXfer+0x13c>
 80025aa:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80025ae:	06db      	lsls	r3, r3, #27
 80025b0:	bf04      	itt	eq
 80025b2:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 80025b6:	b29a      	uxtheq	r2, r3
 80025b8:	4b38      	ldr	r3, [pc, #224]	; (800269c <USB_EPStartXfer+0x1fc>)
 80025ba:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025c4:	7832      	ldrb	r2, [r6, #0]
 80025c6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80025ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80025da:	e790      	b.n	80024fe <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80025dc:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80025e0:	07dc      	lsls	r4, r3, #31
 80025e2:	bf44      	itt	mi
 80025e4:	3201      	addmi	r2, #1
 80025e6:	b292      	uxthmi	r2, r2
 80025e8:	0292      	lsls	r2, r2, #10
 80025ea:	b292      	uxth	r2, r2
 80025ec:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 80025f0:	e7e8      	b.n	80025c4 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80025f2:	b9b9      	cbnz	r1, 8002624 <USB_EPStartXfer+0x184>
 80025f4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80025f8:	2b3e      	cmp	r3, #62	; 0x3e
 80025fa:	b289      	uxth	r1, r1
 80025fc:	f101 0102 	add.w	r1, r1, #2
 8002600:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002604:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002608:	d928      	bls.n	800265c <USB_EPStartXfer+0x1bc>
 800260a:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800260e:	06da      	lsls	r2, r3, #27
 8002610:	bf04      	itt	eq
 8002612:	f100 32ff 	addeq.w	r2, r0, #4294967295	; 0xffffffff
 8002616:	b290      	uxtheq	r0, r2
 8002618:	4a20      	ldr	r2, [pc, #128]	; (800269c <USB_EPStartXfer+0x1fc>)
 800261a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800261e:	b292      	uxth	r2, r2
 8002620:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8002624:	7872      	ldrb	r2, [r6, #1]
 8002626:	7831      	ldrb	r1, [r6, #0]
 8002628:	bb5a      	cbnz	r2, 8002682 <USB_EPStartXfer+0x1e2>
 800262a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800262e:	2b3e      	cmp	r3, #62	; 0x3e
 8002630:	b292      	uxth	r2, r2
 8002632:	f102 0206 	add.w	r2, r2, #6
 8002636:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800263a:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 800263e:	d915      	bls.n	800266c <USB_EPStartXfer+0x1cc>
 8002640:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002644:	06dc      	lsls	r4, r3, #27
 8002646:	bf04      	itt	eq
 8002648:	f101 33ff 	addeq.w	r3, r1, #4294967295	; 0xffffffff
 800264c:	b299      	uxtheq	r1, r3
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <USB_EPStartXfer+0x1fc>)
 8002650:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002654:	b29b      	uxth	r3, r3
 8002656:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 800265a:	e7b3      	b.n	80025c4 <USB_EPStartXfer+0x124>
 800265c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002660:	07d8      	lsls	r0, r3, #31
 8002662:	bf44      	itt	mi
 8002664:	3201      	addmi	r2, #1
 8002666:	b292      	uxthmi	r2, r2
 8002668:	0292      	lsls	r2, r2, #10
 800266a:	e7d8      	b.n	800261e <USB_EPStartXfer+0x17e>
 800266c:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002670:	07db      	lsls	r3, r3, #31
 8002672:	bf44      	itt	mi
 8002674:	3101      	addmi	r1, #1
 8002676:	b289      	uxthmi	r1, r1
 8002678:	0289      	lsls	r1, r1, #10
 800267a:	b289      	uxth	r1, r1
 800267c:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002680:	e7a0      	b.n	80025c4 <USB_EPStartXfer+0x124>
 8002682:	2a01      	cmp	r2, #1
 8002684:	d19e      	bne.n	80025c4 <USB_EPStartXfer+0x124>
 8002686:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800268a:	b292      	uxth	r2, r2
 800268c:	3202      	adds	r2, #2
 800268e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002692:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002696:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 800269a:	e793      	b.n	80025c4 <USB_EPStartXfer+0x124>
 800269c:	ffff8000 	.word	0xffff8000

080026a0 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80026a0:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80026a2:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80026a4:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80026a6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80026aa:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80026ac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80026b0:	42a3      	cmp	r3, r4
 80026b2:	d100      	bne.n	80026b6 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80026b4:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80026b6:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80026ba:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 80026be:	3401      	adds	r4, #1
 80026c0:	e7f6      	b.n	80026b0 <USB_ReadPMA+0x10>

080026c2 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80026c2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80026c6:	b11b      	cbz	r3, 80026d0 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80026c8:	2000      	movs	r0, #0
 80026ca:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80026ce:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80026d0:	2002      	movs	r0, #2
  }
}
 80026d2:	4770      	bx	lr

080026d4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80026d4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 80026d8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80026da:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80026de:	b15b      	cbz	r3, 80026f8 <USBD_CDC_EP0_RxReady+0x24>
 80026e0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80026e4:	28ff      	cmp	r0, #255	; 0xff
 80026e6:	d007      	beq.n	80026f8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80026ee:	4621      	mov	r1, r4
 80026f0:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80026f2:	23ff      	movs	r3, #255	; 0xff
 80026f4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 80026f8:	2000      	movs	r0, #0
 80026fa:	bd10      	pop	{r4, pc}

080026fc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80026fc:	2343      	movs	r3, #67	; 0x43
 80026fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002700:	4800      	ldr	r0, [pc, #0]	; (8002704 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002702:	4770      	bx	lr
 8002704:	20000040 	.word	0x20000040

08002708 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002708:	2343      	movs	r3, #67	; 0x43
 800270a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800270c:	4800      	ldr	r0, [pc, #0]	; (8002710 <USBD_CDC_GetHSCfgDesc+0x8>)
 800270e:	4770      	bx	lr
 8002710:	20000084 	.word	0x20000084

08002714 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002714:	2343      	movs	r3, #67	; 0x43
 8002716:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002718:	4800      	ldr	r0, [pc, #0]	; (800271c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800271a:	4770      	bx	lr
 800271c:	200000d4 	.word	0x200000d4

08002720 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002720:	230a      	movs	r3, #10
 8002722:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002724:	4800      	ldr	r0, [pc, #0]	; (8002728 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002726:	4770      	bx	lr
 8002728:	200000c8 	.word	0x200000c8

0800272c <USBD_CDC_DataOut>:
{      
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002730:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002734:	f001 f90a 	bl	800394c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002738:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800273c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002740:	b14b      	cbz	r3, 8002756 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002742:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002746:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002750:	4798      	blx	r3
    return USBD_OK;
 8002752:	2000      	movs	r0, #0
 8002754:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002756:	2002      	movs	r0, #2
}
 8002758:	bd38      	pop	{r3, r4, r5, pc}
	...

0800275c <USBD_CDC_Setup>:
{
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800275e:	780f      	ldrb	r7, [r1, #0]
{
 8002760:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002762:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002766:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002768:	d023      	beq.n	80027b2 <USBD_CDC_Setup+0x56>
 800276a:	2b20      	cmp	r3, #32
 800276c:	d119      	bne.n	80027a2 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 800276e:	88ca      	ldrh	r2, [r1, #6]
 8002770:	784b      	ldrb	r3, [r1, #1]
 8002772:	b1c2      	cbz	r2, 80027a6 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002774:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002776:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800277a:	d50b      	bpl.n	8002794 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800277c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002780:	4618      	mov	r0, r3
 8002782:	688f      	ldr	r7, [r1, #8]
 8002784:	4629      	mov	r1, r5
 8002786:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002788:	4629      	mov	r1, r5
 800278a:	4630      	mov	r0, r6
 800278c:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 800278e:	f000 fb72 	bl	8002e76 <USBD_CtlSendData>
      break;
 8002792:	e006      	b.n	80027a2 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002794:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002798:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800279c:	4629      	mov	r1, r5
 800279e:	f000 fb7f 	bl	8002ea0 <USBD_CtlPrepareRx>
}
 80027a2:	2000      	movs	r0, #0
 80027a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80027a6:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80027aa:	6884      	ldr	r4, [r0, #8]
 80027ac:	4618      	mov	r0, r3
 80027ae:	47a0      	blx	r4
 80027b0:	e7f7      	b.n	80027a2 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80027b2:	784b      	ldrb	r3, [r1, #1]
 80027b4:	2b0a      	cmp	r3, #10
 80027b6:	d1f4      	bne.n	80027a2 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80027b8:	2201      	movs	r2, #1
 80027ba:	4901      	ldr	r1, [pc, #4]	; (80027c0 <USBD_CDC_Setup+0x64>)
 80027bc:	e7e7      	b.n	800278e <USBD_CDC_Setup+0x32>
 80027be:	bf00      	nop
 80027c0:	2000019c 	.word	0x2000019c

080027c4 <USBD_CDC_DeInit>:
{
 80027c4:	b510      	push	{r4, lr}
 80027c6:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80027c8:	2181      	movs	r1, #129	; 0x81
 80027ca:	f001 f85b 	bl	8003884 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80027ce:	2101      	movs	r1, #1
 80027d0:	4620      	mov	r0, r4
 80027d2:	f001 f857 	bl	8003884 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80027d6:	2182      	movs	r1, #130	; 0x82
 80027d8:	4620      	mov	r0, r4
 80027da:	f001 f853 	bl	8003884 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80027de:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80027e2:	b153      	cbz	r3, 80027fa <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80027e4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80027ec:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80027f0:	f001 f8b6 	bl	8003960 <USBD_static_free>
    pdev->pClassData = NULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80027fa:	2000      	movs	r0, #0
 80027fc:	bd10      	pop	{r4, pc}

080027fe <USBD_CDC_Init>:
{
 80027fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002800:	7c03      	ldrb	r3, [r0, #16]
{
 8002802:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002804:	bb7b      	cbnz	r3, 8002866 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280a:	2202      	movs	r2, #2
 800280c:	2181      	movs	r1, #129	; 0x81
 800280e:	f001 f829 	bl	8003864 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002812:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002816:	2202      	movs	r2, #2
 8002818:	2101      	movs	r1, #1
 800281a:	4620      	mov	r0, r4
 800281c:	f001 f822 	bl	8003864 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002820:	2308      	movs	r3, #8
 8002822:	2203      	movs	r2, #3
 8002824:	2182      	movs	r1, #130	; 0x82
 8002826:	4620      	mov	r0, r4
 8002828:	f001 f81c 	bl	8003864 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800282c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002830:	f001 f892 	bl	8003958 <USBD_static_malloc>
 8002834:	4606      	mov	r6, r0
 8002836:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800283a:	b320      	cbz	r0, 8002886 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 800283c:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800283e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002846:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002848:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 800284c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002850:	b987      	cbnz	r7, 8002874 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002856:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800285a:	2101      	movs	r1, #1
 800285c:	4620      	mov	r0, r4
 800285e:	f001 f867 	bl	8003930 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002862:	4638      	mov	r0, r7
 8002864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002866:	2340      	movs	r3, #64	; 0x40
 8002868:	2202      	movs	r2, #2
 800286a:	2181      	movs	r1, #129	; 0x81
 800286c:	f000 fffa 	bl	8003864 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002870:	2340      	movs	r3, #64	; 0x40
 8002872:	e7d0      	b.n	8002816 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002874:	2340      	movs	r3, #64	; 0x40
 8002876:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800287a:	2101      	movs	r1, #1
 800287c:	4620      	mov	r0, r4
 800287e:	f001 f857 	bl	8003930 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002882:	4628      	mov	r0, r5
 8002884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002886:	2001      	movs	r0, #1
}
 8002888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800288a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800288a:	b119      	cbz	r1, 8002894 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800288c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002890:	2000      	movs	r0, #0
 8002892:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002894:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002896:	4770      	bx	lr

08002898 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002898:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800289c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800289e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80028a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80028a6:	4770      	bx	lr

080028a8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80028a8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80028ac:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80028ae:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80028b2:	4770      	bx	lr

080028b4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80028b4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80028b8:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80028ba:	b162      	cbz	r2, 80028d6 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80028bc:	7c04      	ldrb	r4, [r0, #16]
 80028be:	b944      	cbnz	r4, 80028d2 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80028c0:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80028c4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80028c8:	2101      	movs	r1, #1
 80028ca:	f001 f831 	bl	8003930 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80028ce:	2000      	movs	r0, #0
 80028d0:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	e7f6      	b.n	80028c4 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80028d6:	2002      	movs	r0, #2
  }
}
 80028d8:	bd10      	pop	{r4, pc}

080028da <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80028da:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80028dc:	b180      	cbz	r0, 8002900 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80028de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028e2:	b113      	cbz	r3, 80028ea <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80028ea:	b109      	cbz	r1, 80028f0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80028ec:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80028f0:	2301      	movs	r3, #1
  pdev->id = id;
 80028f2:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80028f4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80028f8:	f000 ff66 	bl	80037c8 <USBD_LL_Init>
  
  return USBD_OK; 
 80028fc:	2000      	movs	r0, #0
 80028fe:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002900:	2002      	movs	r0, #2
}
 8002902:	bd08      	pop	{r3, pc}

08002904 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002904:	b119      	cbz	r1, 800290e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002906:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800290a:	2000      	movs	r0, #0
 800290c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800290e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002910:	4770      	bx	lr

08002912 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002912:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002914:	f000 ff98 	bl	8003848 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002918:	2000      	movs	r0, #0
 800291a:	bd08      	pop	{r3, pc}

0800291c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800291c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800291e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002922:	b90b      	cbnz	r3, 8002928 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002924:	2002      	movs	r0, #2
 8002926:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4798      	blx	r3
 800292c:	2800      	cmp	r0, #0
 800292e:	d1f9      	bne.n	8002924 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002930:	bd08      	pop	{r3, pc}

08002932 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002932:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002934:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4798      	blx	r3
  return USBD_OK;
}
 800293c:	2000      	movs	r0, #0
 800293e:	bd08      	pop	{r3, pc}

08002940 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002940:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002942:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002946:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002948:	4628      	mov	r0, r5
 800294a:	f000 fa64 	bl	8002e16 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800294e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002950:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002954:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002958:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800295c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002960:	f001 031f 	and.w	r3, r1, #31
 8002964:	2b01      	cmp	r3, #1
 8002966:	d00e      	beq.n	8002986 <USBD_LL_SetupStage+0x46>
 8002968:	d307      	bcc.n	800297a <USBD_LL_SetupStage+0x3a>
 800296a:	2b02      	cmp	r3, #2
 800296c:	d010      	beq.n	8002990 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800296e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002972:	4620      	mov	r0, r4
 8002974:	f000 ff94 	bl	80038a0 <USBD_LL_StallEP>
    break;
 8002978:	e003      	b.n	8002982 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800297a:	4629      	mov	r1, r5
 800297c:	4620      	mov	r0, r4
 800297e:	f000 f8d5 	bl	8002b2c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002982:	2000      	movs	r0, #0
 8002984:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002986:	4629      	mov	r1, r5
 8002988:	4620      	mov	r0, r4
 800298a:	f000 f9c9 	bl	8002d20 <USBD_StdItfReq>
    break;
 800298e:	e7f8      	b.n	8002982 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002990:	4629      	mov	r1, r5
 8002992:	4620      	mov	r0, r4
 8002994:	f000 f9dc 	bl	8002d50 <USBD_StdEPReq>
    break;
 8002998:	e7f3      	b.n	8002982 <USBD_LL_SetupStage+0x42>

0800299a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800299a:	b538      	push	{r3, r4, r5, lr}
 800299c:	4604      	mov	r4, r0
 800299e:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80029a0:	bb11      	cbnz	r1, 80029e8 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80029a2:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d10f      	bne.n	80029ca <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80029aa:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80029ae:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d90b      	bls.n	80029ce <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80029b6:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80029b8:	429a      	cmp	r2, r3
 80029ba:	bf28      	it	cs
 80029bc:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80029be:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80029c2:	b292      	uxth	r2, r2
 80029c4:	4629      	mov	r1, r5
 80029c6:	f000 fa7a 	bl	8002ebe <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80029ca:	2000      	movs	r0, #0
 80029cc:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80029ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	b123      	cbz	r3, 80029e0 <USBD_LL_DataOutStage+0x46>
 80029d6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029da:	2a03      	cmp	r2, #3
 80029dc:	d100      	bne.n	80029e0 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80029de:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80029e0:	4620      	mov	r0, r4
 80029e2:	f000 fa74 	bl	8002ece <USBD_CtlSendStatus>
 80029e6:	e7f0      	b.n	80029ca <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80029e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0eb      	beq.n	80029ca <USBD_LL_DataOutStage+0x30>
 80029f2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029f6:	2a03      	cmp	r2, #3
 80029f8:	d1e7      	bne.n	80029ca <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80029fa:	4798      	blx	r3
 80029fc:	e7e5      	b.n	80029ca <USBD_LL_DataOutStage+0x30>

080029fe <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80029fe:	b570      	push	{r4, r5, r6, lr}
 8002a00:	4613      	mov	r3, r2
 8002a02:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002a04:	460e      	mov	r6, r1
 8002a06:	2900      	cmp	r1, #0
 8002a08:	d13d      	bne.n	8002a86 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002a0a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002a0e:	2a02      	cmp	r2, #2
 8002a10:	d10f      	bne.n	8002a32 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002a12:	69c5      	ldr	r5, [r0, #28]
 8002a14:	6a02      	ldr	r2, [r0, #32]
 8002a16:	4295      	cmp	r5, r2
 8002a18:	d914      	bls.n	8002a44 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002a1a:	1aaa      	subs	r2, r5, r2
 8002a1c:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002a1e:	4619      	mov	r1, r3
 8002a20:	b292      	uxth	r2, r2
 8002a22:	f000 fa35 	bl	8002e90 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002a26:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f000 ff7f 	bl	8003930 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002a32:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d102      	bne.n	8002a40 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002a40:	2000      	movs	r0, #0
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002a44:	6983      	ldr	r3, [r0, #24]
 8002a46:	fbb3 f5f2 	udiv	r5, r3, r2
 8002a4a:	fb02 3515 	mls	r5, r2, r5, r3
 8002a4e:	b965      	cbnz	r5, 8002a6a <USBD_LL_DataInStage+0x6c>
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d80a      	bhi.n	8002a6a <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002a54:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d206      	bcs.n	8002a6a <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002a5c:	462a      	mov	r2, r5
 8002a5e:	f000 fa17 	bl	8002e90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002a62:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002a66:	462b      	mov	r3, r5
 8002a68:	e7de      	b.n	8002a28 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002a6a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	b12b      	cbz	r3, 8002a7e <USBD_LL_DataInStage+0x80>
 8002a72:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002a76:	2a03      	cmp	r2, #3
 8002a78:	d101      	bne.n	8002a7e <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f000 fa30 	bl	8002ee4 <USBD_CtlReceiveStatus>
 8002a84:	e7d5      	b.n	8002a32 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002a86:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0d7      	beq.n	8002a40 <USBD_LL_DataInStage+0x42>
 8002a90:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a94:	2a03      	cmp	r2, #3
 8002a96:	d1d3      	bne.n	8002a40 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002a98:	4798      	blx	r3
 8002a9a:	e7d1      	b.n	8002a40 <USBD_LL_DataInStage+0x42>

08002a9c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002a9c:	2200      	movs	r2, #0
{
 8002a9e:	b538      	push	{r3, r4, r5, lr}
 8002aa0:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002aa2:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	f000 fedc 	bl	8003864 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002aac:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002aae:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f000 fed4 	bl	8003864 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002ac2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002ac6:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002ac8:	b12b      	cbz	r3, 8002ad6 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002aca:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002ace:	7921      	ldrb	r1, [r4, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	bd38      	pop	{r3, r4, r5, pc}

08002ada <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002ada:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002adc:	2000      	movs	r0, #0
 8002ade:	4770      	bx	lr

08002ae0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002ae0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002ae4:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002aee:	2000      	movs	r0, #0
 8002af0:	4770      	bx	lr

08002af2 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002af2:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002af6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002afa:	2000      	movs	r0, #0
 8002afc:	4770      	bx	lr

08002afe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002afe:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b00:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002b04:	2a03      	cmp	r2, #3
 8002b06:	d104      	bne.n	8002b12 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002b08:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	b103      	cbz	r3, 8002b12 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002b10:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002b12:	2000      	movs	r0, #0
 8002b14:	bd08      	pop	{r3, pc}

08002b16 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002b16:	b510      	push	{r4, lr}
 8002b18:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	f000 fec0 	bl	80038a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002b20:	4620      	mov	r0, r4
}
 8002b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002b26:	2100      	movs	r1, #0
 8002b28:	f000 beba 	b.w	80038a0 <USBD_LL_StallEP>

08002b2c <USBD_StdDevReq>:
{
 8002b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002b2e:	784b      	ldrb	r3, [r1, #1]
{
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d879      	bhi.n	8002c2c <USBD_StdDevReq+0x100>
 8002b38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b3c:	00e500c9 	.word	0x00e500c9
 8002b40:	00d90078 	.word	0x00d90078
 8002b44:	006d0078 	.word	0x006d0078
 8002b48:	0078000a 	.word	0x0078000a
 8002b4c:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002b50:	884b      	ldrh	r3, [r1, #2]
 8002b52:	0a1a      	lsrs	r2, r3, #8
 8002b54:	3a01      	subs	r2, #1
 8002b56:	2a06      	cmp	r2, #6
 8002b58:	d868      	bhi.n	8002c2c <USBD_StdDevReq+0x100>
 8002b5a:	e8df f002 	tbb	[pc, r2]
 8002b5e:	1c04      	.short	0x1c04
 8002b60:	49676729 	.word	0x49676729
 8002b64:	52          	.byte	0x52
 8002b65:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002b66:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b6a:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002b6c:	f10d 0106 	add.w	r1, sp, #6
 8002b70:	7c20      	ldrb	r0, [r4, #16]
 8002b72:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002b74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002b78:	2a00      	cmp	r2, #0
 8002b7a:	d067      	beq.n	8002c4c <USBD_StdDevReq+0x120>
 8002b7c:	88eb      	ldrh	r3, [r5, #6]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d064      	beq.n	8002c4c <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002b82:	429a      	cmp	r2, r3
 8002b84:	bf28      	it	cs
 8002b86:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002b88:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002b8a:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f971 	bl	8002e76 <USBD_CtlSendData>
 8002b94:	e05a      	b.n	8002c4c <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002b96:	7c02      	ldrb	r2, [r0, #16]
 8002b98:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b9c:	b932      	cbnz	r2, 8002bac <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002ba0:	f10d 0006 	add.w	r0, sp, #6
 8002ba4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002ba6:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002ba8:	7043      	strb	r3, [r0, #1]
 8002baa:	e7e3      	b.n	8002b74 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	e7f7      	b.n	8002ba0 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d83a      	bhi.n	8002c2c <USBD_StdDevReq+0x100>
 8002bb6:	e8df f003 	tbb	[pc, r3]
 8002bba:	0703      	.short	0x0703
 8002bbc:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002bc0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	e7d1      	b.n	8002b6c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002bc8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	e7cd      	b.n	8002b6c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002bd0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	e7c9      	b.n	8002b6c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002bd8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	e7c5      	b.n	8002b6c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002be0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	e7c1      	b.n	8002b6c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002be8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	e7bd      	b.n	8002b6c <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002bf0:	7c03      	ldrb	r3, [r0, #16]
 8002bf2:	b9db      	cbnz	r3, 8002c2c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002bf4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bf8:	f10d 0006 	add.w	r0, sp, #6
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	4798      	blx	r3
 8002c00:	e7b8      	b.n	8002b74 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002c02:	7c03      	ldrb	r3, [r0, #16]
 8002c04:	b993      	cbnz	r3, 8002c2c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002c06:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c0a:	f10d 0006 	add.w	r0, sp, #6
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002c12:	2307      	movs	r3, #7
 8002c14:	e7c8      	b.n	8002ba8 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002c16:	888b      	ldrh	r3, [r1, #4]
 8002c18:	b943      	cbnz	r3, 8002c2c <USBD_StdDevReq+0x100>
 8002c1a:	88cb      	ldrh	r3, [r1, #6]
 8002c1c:	b933      	cbnz	r3, 8002c2c <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002c1e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002c22:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002c24:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002c26:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002c2a:	d103      	bne.n	8002c34 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ff72 	bl	8002b16 <USBD_CtlError.constprop.0>
    break;
 8002c32:	e00b      	b.n	8002c4c <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002c34:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002c38:	4629      	mov	r1, r5
 8002c3a:	f000 fe5d 	bl	80038f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f000 f945 	bl	8002ece <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002c44:	b12d      	cbz	r5, 8002c52 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002c46:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002c48:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	b003      	add	sp, #12
 8002c50:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002c52:	2301      	movs	r3, #1
 8002c54:	e7f8      	b.n	8002c48 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002c56:	7889      	ldrb	r1, [r1, #2]
 8002c58:	4d30      	ldr	r5, [pc, #192]	; (8002d1c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002c5a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002c5c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002c5e:	d8e5      	bhi.n	8002c2c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002c60:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d00c      	beq.n	8002c82 <USBD_StdDevReq+0x156>
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d1df      	bne.n	8002c2c <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002c6c:	b9b1      	cbnz	r1, 8002c9c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002c6e:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002c70:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002c72:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002c76:	f7ff fe5c 	bl	8002932 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f000 f927 	bl	8002ece <USBD_CtlSendStatus>
 8002c80:	e7e4      	b.n	8002c4c <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002c82:	2900      	cmp	r1, #0
 8002c84:	d0f9      	beq.n	8002c7a <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002c86:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c88:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002c8a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c8c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff fe43 	bl	800291c <USBD_SetClassConfig>
 8002c96:	2802      	cmp	r0, #2
 8002c98:	d1ef      	bne.n	8002c7a <USBD_StdDevReq+0x14e>
 8002c9a:	e7c7      	b.n	8002c2c <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002c9c:	6841      	ldr	r1, [r0, #4]
 8002c9e:	2901      	cmp	r1, #1
 8002ca0:	d0eb      	beq.n	8002c7a <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002ca2:	b2c9      	uxtb	r1, r1
 8002ca4:	f7ff fe45 	bl	8002932 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002ca8:	7829      	ldrb	r1, [r5, #0]
 8002caa:	6061      	str	r1, [r4, #4]
 8002cac:	e7f0      	b.n	8002c90 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002cae:	88ca      	ldrh	r2, [r1, #6]
 8002cb0:	2a01      	cmp	r2, #1
 8002cb2:	d1bb      	bne.n	8002c2c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002cb4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d003      	beq.n	8002cc4 <USBD_StdDevReq+0x198>
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d1b5      	bne.n	8002c2c <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002cc0:	1d01      	adds	r1, r0, #4
 8002cc2:	e764      	b.n	8002b8e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f841 3f08 	str.w	r3, [r1, #8]!
 8002ccc:	e75f      	b.n	8002b8e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002cce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002cd2:	3b02      	subs	r3, #2
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d8a9      	bhi.n	8002c2c <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002cd8:	2301      	movs	r3, #1
 8002cda:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002cdc:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002ce0:	b10b      	cbz	r3, 8002ce6 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f104 010c 	add.w	r1, r4, #12
 8002cec:	e74f      	b.n	8002b8e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002cee:	884b      	ldrh	r3, [r1, #2]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d1ab      	bne.n	8002c4c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002cf4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002cf8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4620      	mov	r0, r4
 8002d02:	4798      	blx	r3
 8002d04:	e7b9      	b.n	8002c7a <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002d06:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002d0a:	3b02      	subs	r3, #2
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d88d      	bhi.n	8002c2c <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002d10:	884b      	ldrh	r3, [r1, #2]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d19a      	bne.n	8002c4c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002d16:	2300      	movs	r3, #0
 8002d18:	e7ec      	b.n	8002cf4 <USBD_StdDevReq+0x1c8>
 8002d1a:	bf00      	nop
 8002d1c:	2000019d 	.word	0x2000019d

08002d20 <USBD_StdItfReq>:
{
 8002d20:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002d22:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002d26:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002d28:	2b03      	cmp	r3, #3
{
 8002d2a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002d2c:	d10d      	bne.n	8002d4a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002d2e:	790b      	ldrb	r3, [r1, #4]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d80a      	bhi.n	8002d4a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002d34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002d3c:	88eb      	ldrh	r3, [r5, #6]
 8002d3e:	b913      	cbnz	r3, 8002d46 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f000 f8c4 	bl	8002ece <USBD_CtlSendStatus>
}
 8002d46:	2000      	movs	r0, #0
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002d4a:	f7ff fee4 	bl	8002b16 <USBD_CtlError.constprop.0>
    break;
 8002d4e:	e7fa      	b.n	8002d46 <USBD_StdItfReq+0x26>

08002d50 <USBD_StdEPReq>:
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002d52:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002d54:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002d56:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002d5a:	2a20      	cmp	r2, #32
{
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002d60:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002d62:	d105      	bne.n	8002d70 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002d64:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4798      	blx	r3
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002d70:	784a      	ldrb	r2, [r1, #1]
 8002d72:	2a01      	cmp	r2, #1
 8002d74:	d01c      	beq.n	8002db0 <USBD_StdEPReq+0x60>
 8002d76:	d32a      	bcc.n	8002dce <USBD_StdEPReq+0x7e>
 8002d78:	2a03      	cmp	r2, #3
 8002d7a:	d1f7      	bne.n	8002d6c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002d7c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d80:	2a02      	cmp	r2, #2
 8002d82:	d040      	beq.n	8002e06 <USBD_StdEPReq+0xb6>
 8002d84:	2a03      	cmp	r2, #3
 8002d86:	d002      	beq.n	8002d8e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002d88:	f7ff fec5 	bl	8002b16 <USBD_CtlError.constprop.0>
      break;
 8002d8c:	e7ee      	b.n	8002d6c <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002d8e:	884a      	ldrh	r2, [r1, #2]
 8002d90:	b922      	cbnz	r2, 8002d9c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002d92:	065e      	lsls	r6, r3, #25
 8002d94:	d002      	beq.n	8002d9c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002d96:	4619      	mov	r1, r3
 8002d98:	f000 fd82 	bl	80038a0 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002d9c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002da0:	4629      	mov	r1, r5
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4620      	mov	r0, r4
 8002da6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002da8:	4620      	mov	r0, r4
 8002daa:	f000 f890 	bl	8002ece <USBD_CtlSendStatus>
 8002dae:	e7dd      	b.n	8002d6c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002db0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002db4:	2a02      	cmp	r2, #2
 8002db6:	d026      	beq.n	8002e06 <USBD_StdEPReq+0xb6>
 8002db8:	2a03      	cmp	r2, #3
 8002dba:	d1e5      	bne.n	8002d88 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002dbc:	884a      	ldrh	r2, [r1, #2]
 8002dbe:	2a00      	cmp	r2, #0
 8002dc0:	d1d4      	bne.n	8002d6c <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002dc2:	0659      	lsls	r1, r3, #25
 8002dc4:	d0f0      	beq.n	8002da8 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f000 fd78 	bl	80038bc <USBD_LL_ClearStallEP>
 8002dcc:	e7e6      	b.n	8002d9c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002dce:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002dd2:	2a02      	cmp	r2, #2
 8002dd4:	d017      	beq.n	8002e06 <USBD_StdEPReq+0xb6>
 8002dd6:	2a03      	cmp	r2, #3
 8002dd8:	d1d6      	bne.n	8002d88 <USBD_StdEPReq+0x38>
 8002dda:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002dde:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002de2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002de6:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002de8:	bf14      	ite	ne
 8002dea:	3514      	addne	r5, #20
 8002dec:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002df0:	f000 fd72 	bl	80038d8 <USBD_LL_IsStallEP>
 8002df4:	b168      	cbz	r0, 8002e12 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002df6:	2301      	movs	r3, #1
 8002df8:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f000 f839 	bl	8002e76 <USBD_CtlSendData>
      break;
 8002e04:	e7b2      	b.n	8002d6c <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002e06:	065a      	lsls	r2, r3, #25
 8002e08:	d0b0      	beq.n	8002d6c <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f000 fd48 	bl	80038a0 <USBD_LL_StallEP>
 8002e10:	e7ac      	b.n	8002d6c <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002e12:	6028      	str	r0, [r5, #0]
 8002e14:	e7f1      	b.n	8002dfa <USBD_StdEPReq+0xaa>

08002e16 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002e16:	780b      	ldrb	r3, [r1, #0]
 8002e18:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002e1a:	784b      	ldrb	r3, [r1, #1]
 8002e1c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002e1e:	78ca      	ldrb	r2, [r1, #3]
 8002e20:	788b      	ldrb	r3, [r1, #2]
 8002e22:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e26:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002e28:	794a      	ldrb	r2, [r1, #5]
 8002e2a:	790b      	ldrb	r3, [r1, #4]
 8002e2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e30:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002e32:	79ca      	ldrb	r2, [r1, #7]
 8002e34:	798b      	ldrb	r3, [r1, #6]
 8002e36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e3a:	80c3      	strh	r3, [r0, #6]
 8002e3c:	4770      	bx	lr

08002e3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002e3e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002e40:	b188      	cbz	r0, 8002e66 <USBD_GetString+0x28>
 8002e42:	4605      	mov	r5, r0
 8002e44:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002e46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2c00      	cmp	r4, #0
 8002e4e:	d1f9      	bne.n	8002e44 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	3302      	adds	r3, #2
 8002e54:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002e56:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	704b      	strb	r3, [r1, #1]
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002e60:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002e64:	b905      	cbnz	r5, 8002e68 <USBD_GetString+0x2a>
 8002e66:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	54cd      	strb	r5, [r1, r3]
 8002e6c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002e6e:	3302      	adds	r3, #2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	548c      	strb	r4, [r1, r2]
 8002e74:	e7f4      	b.n	8002e60 <USBD_GetString+0x22>

08002e76 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002e76:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002e78:	2202      	movs	r2, #2
{
 8002e7a:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002e7c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002e80:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e82:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002e84:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e86:	2100      	movs	r1, #0
 8002e88:	f000 fd44 	bl	8003914 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002e90:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002e92:	4613      	mov	r3, r2
 8002e94:	460a      	mov	r2, r1
 8002e96:	2100      	movs	r1, #0
 8002e98:	f000 fd3c 	bl	8003914 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	bd08      	pop	{r3, pc}

08002ea0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002ea0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002ea2:	2203      	movs	r2, #3
{
 8002ea4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002ea6:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002eaa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002eae:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002eb0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f000 fd3b 	bl	8003930 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002eba:	2000      	movs	r0, #0
 8002ebc:	bd10      	pop	{r4, pc}

08002ebe <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002ebe:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f000 fd33 	bl	8003930 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002eca:	2000      	movs	r0, #0
 8002ecc:	bd08      	pop	{r3, pc}

08002ece <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002ece:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4619      	mov	r1, r3
 8002edc:	f000 fd1a 	bl	8003914 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	bd08      	pop	{r3, pc}

08002ee4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002ee4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002eec:	2300      	movs	r3, #0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f000 fd1d 	bl	8003930 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	bd08      	pop	{r3, pc}
	...

08002efc <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002efc:	4823      	ldr	r0, [pc, #140]	; (8002f8c <MX_ADC1_Init+0x90>)
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <MX_ADC1_Init+0x94>)
{
 8002f00:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8002f02:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f08:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f0a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f0e:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f10:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f12:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002f14:	2304      	movs	r3, #4
{
 8002f16:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f18:	9401      	str	r4, [sp, #4]
 8002f1a:	9402      	str	r4, [sp, #8]
 8002f1c:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f1e:	60c5      	str	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f20:	6144      	str	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f22:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002f24:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f26:	f7fd fb13 	bl	8000550 <HAL_ADC_Init>
 8002f2a:	b108      	cbz	r0, 8002f30 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8002f2c:	f000 fa8a 	bl	8003444 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002f30:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f32:	a901      	add	r1, sp, #4
 8002f34:	4815      	ldr	r0, [pc, #84]	; (8002f8c <MX_ADC1_Init+0x90>)
  sConfig.Channel = ADC_CHANNEL_0;
 8002f36:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f38:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002f3a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3c:	f7fd f99c 	bl	8000278 <HAL_ADC_ConfigChannel>
 8002f40:	b108      	cbz	r0, 8002f46 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8002f42:	f000 fa7f 	bl	8003444 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f46:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f48:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f4a:	a901      	add	r1, sp, #4
 8002f4c:	480f      	ldr	r0, [pc, #60]	; (8002f8c <MX_ADC1_Init+0x90>)
  sConfig.Channel = ADC_CHANNEL_1;
 8002f4e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f50:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f52:	f7fd f991 	bl	8000278 <HAL_ADC_ConfigChannel>
 8002f56:	b108      	cbz	r0, 8002f5c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002f58:	f000 fa74 	bl	8003444 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f5c:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f5e:	2403      	movs	r4, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f60:	a901      	add	r1, sp, #4
 8002f62:	480a      	ldr	r0, [pc, #40]	; (8002f8c <MX_ADC1_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f64:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f66:	f7fd f987 	bl	8000278 <HAL_ADC_ConfigChannel>
 8002f6a:	b108      	cbz	r0, 8002f70 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002f6c:	f000 fa6a 	bl	8003444 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f70:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f72:	4806      	ldr	r0, [pc, #24]	; (8002f8c <MX_ADC1_Init+0x90>)
 8002f74:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Channel = ADC_CHANNEL_3;
 8002f78:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f7a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f7c:	f7fd f97c 	bl	8000278 <HAL_ADC_ConfigChannel>
 8002f80:	b108      	cbz	r0, 8002f86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002f82:	f000 fa5f 	bl	8003444 <Error_Handler>
  }

}
 8002f86:	b005      	add	sp, #20
 8002f88:	bd30      	pop	{r4, r5, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200003c4 	.word	0x200003c4
 8002f90:	40012400 	.word	0x40012400

08002f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002f94:	b530      	push	{r4, r5, lr}
 8002f96:	4605      	mov	r5, r0
 8002f98:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	a802      	add	r0, sp, #8
 8002fa0:	f000 fda2 	bl	8003ae8 <memset>
  if(adcHandle->Instance==ADC1)
 8002fa4:	682a      	ldr	r2, [r5, #0]
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <HAL_ADC_MspInit+0x84>)
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d132      	bne.n	8003012 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fac:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002fb0:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|Mikro1_Pin|Mikro2_Pin|Mikro3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	481a      	ldr	r0, [pc, #104]	; (800301c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb8:	619a      	str	r2, [r3, #24]
 8002fba:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fbe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002fc2:	9200      	str	r2, [sp, #0]
 8002fc4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fc8:	4c15      	ldr	r4, [pc, #84]	; (8003020 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	f042 0204 	orr.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|Mikro1_Pin|Mikro2_Pin|Mikro3_Pin;
 8002fda:	230f      	movs	r3, #15
 8002fdc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f7fd fce9 	bl	80009b8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ff0:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8002ff2:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ff4:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff6:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ff8:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ffa:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffc:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ffe:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003000:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003002:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003004:	f7fd fbc0 	bl	8000788 <HAL_DMA_Init>
 8003008:	b108      	cbz	r0, 800300e <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800300a:	f000 fa1b 	bl	8003444 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800300e:	622c      	str	r4, [r5, #32]
 8003010:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003012:	b007      	add	sp, #28
 8003014:	bd30      	pop	{r4, r5, pc}
 8003016:	bf00      	nop
 8003018:	40012400 	.word	0x40012400
 800301c:	40010800 	.word	0x40010800
 8003020:	200003f4 	.word	0x200003f4
 8003024:	40020008 	.word	0x40020008

08003028 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <MX_DMA_Init+0x2c>)
{
 800302a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800302c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800302e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003038:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800303a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003044:	f7fd fb3c 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003048:	200b      	movs	r0, #11
 800304a:	f7fd fb6d 	bl	8000728 <HAL_NVIC_EnableIRQ>

}
 800304e:	b003      	add	sp, #12
 8003050:	f85d fb04 	ldr.w	pc, [sp], #4
 8003054:	40021000 	.word	0x40021000

08003058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305a:	2410      	movs	r4, #16
  HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Krancowka1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800305c:	2501      	movs	r5, #1
{
 800305e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	4622      	mov	r2, r4
 8003062:	eb0d 0004 	add.w	r0, sp, r4
 8003066:	2100      	movs	r1, #0
 8003068:	f000 fd3e 	bl	8003ae8 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800306c:	4b30      	ldr	r3, [pc, #192]	; (8003130 <MX_GPIO_Init+0xd8>)
  HAL_GPIO_WritePin(GPIOB, A3_Pin|A4_Pin|A1_Pin, GPIO_PIN_SET);
 800306e:	4f31      	ldr	r7, [pc, #196]	; (8003134 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003070:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_SET);
 8003072:	4e31      	ldr	r6, [pc, #196]	; (8003138 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003074:	f042 0220 	orr.w	r2, r2, #32
 8003078:	619a      	str	r2, [r3, #24]
 800307a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, A3_Pin|A4_Pin|A1_Pin, GPIO_PIN_SET);
 800307c:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800307e:	f002 0220 	and.w	r2, r2, #32
 8003082:	9201      	str	r2, [sp, #4]
 8003084:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003086:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, A3_Pin|A4_Pin|A1_Pin, GPIO_PIN_SET);
 8003088:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	f042 0204 	orr.w	r2, r2, #4
 8003090:	619a      	str	r2, [r3, #24]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	f002 0204 	and.w	r2, r2, #4
 8003098:	9202      	str	r2, [sp, #8]
 800309a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	f042 0208 	orr.w	r2, r2, #8
 80030a2:	619a      	str	r2, [r3, #24]
 80030a4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, A3_Pin|A4_Pin|A1_Pin, GPIO_PIN_SET);
 80030a6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	9303      	str	r3, [sp, #12]
 80030ae:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, A3_Pin|A4_Pin|A1_Pin, GPIO_PIN_SET);
 80030b0:	f7fd fd68 	bl	8000b84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_SET);
 80030b4:	2201      	movs	r2, #1
 80030b6:	4630      	mov	r0, r6
 80030b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030bc:	f7fd fd62 	bl	8000b84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Krancowka1_Pin;
 80030c0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030c2:	4c1e      	ldr	r4, [pc, #120]	; (800313c <MX_GPIO_Init+0xe4>)
  HAL_GPIO_Init(Krancowka1_GPIO_Port, &GPIO_InitStruct);
 80030c4:	a904      	add	r1, sp, #16
 80030c6:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ca:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(Krancowka1_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f7fd fc74 	bl	80009b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PoziomHalasu_Pin;
 80030d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(PoziomHalasu_GPIO_Port, &GPIO_InitStruct);
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = PoziomHalasu_Pin;
 80030d8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030dc:	9506      	str	r5, [sp, #24]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030de:	2402      	movs	r4, #2
  HAL_GPIO_Init(PoziomHalasu_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f7fd fc6a 	bl	80009b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A1_Pin;
 80030e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e8:	a904      	add	r1, sp, #16
 80030ea:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A1_Pin;
 80030ec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ee:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030f0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f4:	f7fd fc60 	bl	80009b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A2_Pin;
 80030f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 80030fc:	a904      	add	r1, sp, #16
 80030fe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = A2_Pin;
 8003100:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003104:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8003108:	f7fd fc56 	bl	80009b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	200a      	movs	r0, #10
 8003110:	4611      	mov	r1, r2
 8003112:	f7fd fad5 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003116:	200a      	movs	r0, #10
 8003118:	f7fd fb06 	bl	8000728 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800311c:	2200      	movs	r2, #0
 800311e:	2028      	movs	r0, #40	; 0x28
 8003120:	4611      	mov	r1, r2
 8003122:	f7fd facd 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003126:	2028      	movs	r0, #40	; 0x28
 8003128:	f7fd fafe 	bl	8000728 <HAL_NVIC_EnableIRQ>

}
 800312c:	b009      	add	sp, #36	; 0x24
 800312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	40010c00 	.word	0x40010c00
 8003138:	40010800 	.word	0x40010800
 800313c:	10210000 	.word	0x10210000

08003140 <obrot_lewo>:


}

void obrot_lewo(uint16_t v, uint16_t t)
{
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4604      	mov	r4, r0
	   HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_SET);
 8003144:	2201      	movs	r2, #1
 8003146:	4816      	ldr	r0, [pc, #88]	; (80031a0 <obrot_lewo+0x60>)
{
 8003148:	460e      	mov	r6, r1
	   HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_SET);
 800314a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800314e:	f7fd fd19 	bl	8000b84 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003158:	4812      	ldr	r0, [pc, #72]	; (80031a4 <obrot_lewo+0x64>)
 800315a:	f7fd fd13 	bl	8000b84 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, GPIO_PIN_SET);
 800315e:	2201      	movs	r2, #1
 8003160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003164:	480e      	ldr	r0, [pc, #56]	; (80031a0 <obrot_lewo+0x60>)
 8003166:	f7fd fd0d 	bl	8000b84 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, GPIO_PIN_RESET);
 800316a:	480d      	ldr	r0, [pc, #52]	; (80031a0 <obrot_lewo+0x60>)
 800316c:	2200      	movs	r2, #0
 800316e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003172:	f7fd fd07 	bl	8000b84 <HAL_GPIO_WritePin>


	if(v > 1000) v = 1000;

	TIM1->CCR1  = v;
 8003176:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800317a:	4620      	mov	r0, r4
 800317c:	bf28      	it	cs
 800317e:	f44f 707a 	movcs.w	r0, #1000	; 0x3e8
	TIM1->CCR2 = v;

	for(int i=0; i<t; i++){
 8003182:	2500      	movs	r5, #0
	TIM1->CCR1  = v;
 8003184:	4c08      	ldr	r4, [pc, #32]	; (80031a8 <obrot_lewo+0x68>)
 8003186:	6360      	str	r0, [r4, #52]	; 0x34
	TIM1->CCR2 = v;
 8003188:	63a0      	str	r0, [r4, #56]	; 0x38
	for(int i=0; i<t; i++){
 800318a:	42b5      	cmp	r5, r6
 800318c:	db03      	blt.n	8003196 <obrot_lewo+0x56>
		HAL_Delay(1);

	}

	TIM1->CCR1 = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = 0;
 8003192:	63a3      	str	r3, [r4, #56]	; 0x38
 8003194:	bd70      	pop	{r4, r5, r6, pc}
		HAL_Delay(1);
 8003196:	2001      	movs	r0, #1
 8003198:	f7fd f820 	bl	80001dc <HAL_Delay>
	for(int i=0; i<t; i++){
 800319c:	3501      	adds	r5, #1
 800319e:	e7f4      	b.n	800318a <obrot_lewo+0x4a>
 80031a0:	40010c00 	.word	0x40010c00
 80031a4:	40010800 	.word	0x40010800
 80031a8:	40012c00 	.word	0x40012c00

080031ac <obrot_prawo>:


}


void obrot_prawo(uint16_t v, uint16_t t){
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4604      	mov	r4, r0
	   HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 80031b0:	2200      	movs	r2, #0
 80031b2:	4816      	ldr	r0, [pc, #88]	; (800320c <obrot_prawo+0x60>)
void obrot_prawo(uint16_t v, uint16_t t){
 80031b4:	460e      	mov	r6, r1
	   HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 80031b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ba:	f7fd fce3 	bl	8000b84 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_SET);
 80031be:	2201      	movs	r2, #1
 80031c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031c4:	4812      	ldr	r0, [pc, #72]	; (8003210 <obrot_prawo+0x64>)
 80031c6:	f7fd fcdd 	bl	8000b84 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, GPIO_PIN_RESET);
 80031ca:	2200      	movs	r2, #0
 80031cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031d0:	480e      	ldr	r0, [pc, #56]	; (800320c <obrot_prawo+0x60>)
 80031d2:	f7fd fcd7 	bl	8000b84 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, GPIO_PIN_SET);
 80031d6:	480d      	ldr	r0, [pc, #52]	; (800320c <obrot_prawo+0x60>)
 80031d8:	2201      	movs	r2, #1
 80031da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031de:	f7fd fcd1 	bl	8000b84 <HAL_GPIO_WritePin>

		if(v>1000) v = 1000;
		TIM1->CCR1  = v;
 80031e2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80031e6:	4620      	mov	r0, r4
 80031e8:	bf28      	it	cs
 80031ea:	f44f 707a 	movcs.w	r0, #1000	; 0x3e8
		TIM1->CCR2 = v;
		for(int i=0; i<t; i++){
 80031ee:	2500      	movs	r5, #0
		TIM1->CCR1  = v;
 80031f0:	4c08      	ldr	r4, [pc, #32]	; (8003214 <obrot_prawo+0x68>)
 80031f2:	6360      	str	r0, [r4, #52]	; 0x34
		TIM1->CCR2 = v;
 80031f4:	63a0      	str	r0, [r4, #56]	; 0x38
		for(int i=0; i<t; i++){
 80031f6:	42b5      	cmp	r5, r6
 80031f8:	db03      	blt.n	8003202 <obrot_prawo+0x56>
			HAL_Delay(1);

		}
		TIM1->CCR1 = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	6363      	str	r3, [r4, #52]	; 0x34
		TIM1->CCR2 = 0;
 80031fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8003200:	bd70      	pop	{r4, r5, r6, pc}
			HAL_Delay(1);
 8003202:	2001      	movs	r0, #1
 8003204:	f7fc ffea 	bl	80001dc <HAL_Delay>
		for(int i=0; i<t; i++){
 8003208:	3501      	adds	r5, #1
 800320a:	e7f4      	b.n	80031f6 <obrot_prawo+0x4a>
 800320c:	40010c00 	.word	0x40010c00
 8003210:	40010800 	.word	0x40010800
 8003214:	40012c00 	.word	0x40012c00

08003218 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003218:	2228      	movs	r2, #40	; 0x28
{
 800321a:	b530      	push	{r4, r5, lr}
 800321c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800321e:	eb0d 0002 	add.w	r0, sp, r2
 8003222:	2100      	movs	r1, #0
 8003224:	f000 fc60 	bl	8003ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003228:	2214      	movs	r2, #20
 800322a:	2100      	movs	r1, #0
 800322c:	eb0d 0002 	add.w	r0, sp, r2
 8003230:	f000 fc5a 	bl	8003ae8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003234:	2210      	movs	r2, #16
 8003236:	2100      	movs	r1, #0
 8003238:	a801      	add	r0, sp, #4
 800323a:	f000 fc55 	bl	8003ae8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800323e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003242:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003244:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003246:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003248:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800324a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800324e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003250:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003252:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003254:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003256:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003258:	f7fe f890 	bl	800137c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800325e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003262:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003264:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003266:	4621      	mov	r1, r4
 8003268:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800326c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800326e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003270:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003272:	f7fe fa4b 	bl	800170c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003276:	2312      	movs	r3, #18
 8003278:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800327a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800327e:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003284:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003286:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003288:	f7fe faf2 	bl	8001870 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800328c:	b015      	add	sp, #84	; 0x54
 800328e:	bd30      	pop	{r4, r5, pc}

08003290 <main>:
{
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8003292:	f7fc ff7f 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8003296:	f7ff ffbf 	bl	8003218 <SystemClock_Config>
  MX_GPIO_Init();
 800329a:	f7ff fedd 	bl	8003058 <MX_GPIO_Init>
  MX_DMA_Init();
 800329e:	f7ff fec3 	bl	8003028 <MX_DMA_Init>
  MX_ADC1_Init();
 80032a2:	f7ff fe2b 	bl	8002efc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80032a6:	f000 f9e3 	bl	8003670 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80032aa:	f000 f96f 	bl	800358c <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80032ae:	2100      	movs	r1, #0
 80032b0:	4832      	ldr	r0, [pc, #200]	; (800337c <main+0xec>)
 80032b2:	f7fe fd89 	bl	8001dc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80032b6:	2104      	movs	r1, #4
 80032b8:	4830      	ldr	r0, [pc, #192]	; (800337c <main+0xec>)
 80032ba:	f7fe fd85 	bl	8001dc8 <HAL_TIM_PWM_Start>
	  	if(adc1 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc1)
 80032be:	4e30      	ldr	r6, [pc, #192]	; (8003380 <main+0xf0>)
  HAL_ADC_Start_DMA(&hadc1,adc,4);
 80032c0:	2204      	movs	r2, #4
 80032c2:	4930      	ldr	r1, [pc, #192]	; (8003384 <main+0xf4>)
 80032c4:	4830      	ldr	r0, [pc, #192]	; (8003388 <main+0xf8>)
 80032c6:	f7fd f893 	bl	80003f0 <HAL_ADC_Start_DMA>
  KtoryProgHalasu = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	4635      	mov	r5, r6
 80032ce:	4c2f      	ldr	r4, [pc, #188]	; (800338c <main+0xfc>)
	  HAL_ADC_Stop_DMA(&hadc1);
 80032d0:	4f2d      	ldr	r7, [pc, #180]	; (8003388 <main+0xf8>)
  KtoryProgHalasu = 0;
 80032d2:	7023      	strb	r3, [r4, #0]
	  HAL_ADC_Stop_DMA(&hadc1);
 80032d4:	4638      	mov	r0, r7
 80032d6:	f7fd f9bb 	bl	8000650 <HAL_ADC_Stop_DMA>
  __ASM volatile ("cpsid i" : : : "memory");
 80032da:	b672      	cpsid	i
		adc1 = adc[0];
 80032dc:	4a29      	ldr	r2, [pc, #164]	; (8003384 <main+0xf4>)
 80032de:	492c      	ldr	r1, [pc, #176]	; (8003390 <main+0x100>)
 80032e0:	6813      	ldr	r3, [r2, #0]
		adc2 = adc[1];
 80032e2:	6850      	ldr	r0, [r2, #4]
		adc1 = adc[0];
 80032e4:	600b      	str	r3, [r1, #0]
		adc2 = adc[1];
 80032e6:	492b      	ldr	r1, [pc, #172]	; (8003394 <main+0x104>)
	  	adc3=adc[2];
 80032e8:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 800339c <main+0x10c>
		adc2 = adc[1];
 80032ec:	6008      	str	r0, [r1, #0]
	  	adc3=adc[2];
 80032ee:	6891      	ldr	r1, [r2, #8]
 80032f0:	f8ce 1000 	str.w	r1, [lr]
	  	adc4=adc[3];
 80032f4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80032f8:	4a27      	ldr	r2, [pc, #156]	; (8003398 <main+0x108>)
 80032fa:	f8c2 e000 	str.w	lr, [r2]
	  	if(adc1 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc1)
 80032fe:	7822      	ldrb	r2, [r4, #0]
	  	if(adc2 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc2)
 8003300:	f894 c000 	ldrb.w	ip, [r4]
	  	if(adc1 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc1)
 8003304:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
	  	if(adc2 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc2)
 8003308:	f835 c01c 	ldrh.w	ip, [r5, ip, lsl #1]
	  	if(adc1 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc1)
 800330c:	4293      	cmp	r3, r2
	  	MikrofonMax = 0;
 800330e:	bf93      	iteet	ls
 8003310:	2200      	movls	r2, #0
	  		WartoscMax = adc1;
 8003312:	b29b      	uxthhi	r3, r3
	  		MikrofonMax = 1;
 8003314:	2201      	movhi	r2, #1
	  	WartoscMax = 0;
 8003316:	4613      	movls	r3, r2
	  	if(adc2 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc2)
 8003318:	4560      	cmp	r0, ip
 800331a:	d903      	bls.n	8003324 <main+0x94>
 800331c:	4298      	cmp	r0, r3
			MikrofonMax = 2;
 800331e:	bf84      	itt	hi
 8003320:	2202      	movhi	r2, #2
	  		WartoscMax = adc2;
 8003322:	b283      	uxthhi	r3, r0
	  	if(adc3 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc3)
 8003324:	7820      	ldrb	r0, [r4, #0]
 8003326:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 800332a:	4281      	cmp	r1, r0
 800332c:	d903      	bls.n	8003336 <main+0xa6>
 800332e:	4299      	cmp	r1, r3
			MikrofonMax = 3;
 8003330:	bf84      	itt	hi
 8003332:	2203      	movhi	r2, #3
	  		WartoscMax = adc3;
 8003334:	b28b      	uxthhi	r3, r1
	  	if(adc4 > ProgiHalasu[KtoryProgHalasu] && WartoscMax < adc4)
 8003336:	7821      	ldrb	r1, [r4, #0]
 8003338:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 800333c:	458e      	cmp	lr, r1
 800333e:	d901      	bls.n	8003344 <main+0xb4>
 8003340:	459e      	cmp	lr, r3
 8003342:	d819      	bhi.n	8003378 <main+0xe8>
	  	switch(MikrofonMax)
 8003344:	2a02      	cmp	r2, #2
 8003346:	d00a      	beq.n	800335e <main+0xce>
 8003348:	2a03      	cmp	r2, #3
 800334a:	d013      	beq.n	8003374 <main+0xe4>
 800334c:	2a01      	cmp	r2, #1
 800334e:	d10f      	bne.n	8003370 <main+0xe0>
				obrot_prawo(1000, 615);
 8003350:	f240 2167 	movw	r1, #615	; 0x267
				obrot_prawo(1000, 205);
 8003354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003358:	f7ff ff28 	bl	80031ac <obrot_prawo>
 800335c:	e005      	b.n	800336a <main+0xda>
				obrot_lewo(1000, 615);
 800335e:	f240 2167 	movw	r1, #615	; 0x267
				obrot_lewo(1000, 205);
 8003362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003366:	f7ff feeb 	bl	8003140 <obrot_lewo>
				HAL_Delay(30);
 800336a:	201e      	movs	r0, #30
 800336c:	f7fc ff36 	bl	80001dc <HAL_Delay>
  __ASM volatile ("cpsie i" : : : "memory");
 8003370:	b662      	cpsie	i
 8003372:	e7af      	b.n	80032d4 <main+0x44>
				obrot_lewo(1000, 205);
 8003374:	21cd      	movs	r1, #205	; 0xcd
 8003376:	e7f4      	b.n	8003362 <main+0xd2>
				obrot_prawo(1000, 205);
 8003378:	21cd      	movs	r1, #205	; 0xcd
 800337a:	e7eb      	b.n	8003354 <main+0xc4>
 800337c:	20000468 	.word	0x20000468
 8003380:	08003b20 	.word	0x08003b20
 8003384:	2000044c 	.word	0x2000044c
 8003388:	200003c4 	.word	0x200003c4
 800338c:	20000444 	.word	0x20000444
 8003390:	20000448 	.word	0x20000448
 8003394:	2000045c 	.word	0x2000045c
 8003398:	20000460 	.word	0x20000460
 800339c:	20000464 	.word	0x20000464

080033a0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	GPIO_PinState OdczytanyStanPrzycisku;
	GPIO_PinState OdczytanyStanPrzycisku2;

	if(GPIO_Pin == Krancowka1_Pin)
 80033a0:	2810      	cmp	r0, #16
{
 80033a2:	b510      	push	{r4, lr}
 80033a4:	4604      	mov	r4, r0
	if(GPIO_Pin == Krancowka1_Pin)
 80033a6:	d11a      	bne.n	80033de <HAL_GPIO_EXTI_Callback+0x3e>
	{
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80033a8:	200a      	movs	r0, #10
 80033aa:	f7fd f9c9 	bl	8000740 <HAL_NVIC_DisableIRQ>

		OdczytanyStanPrzycisku = HAL_GPIO_ReadPin( Krancowka1_GPIO_Port,  Krancowka1_Pin);
 80033ae:	4621      	mov	r1, r4
 80033b0:	481c      	ldr	r0, [pc, #112]	; (8003424 <HAL_GPIO_EXTI_Callback+0x84>)
 80033b2:	f7fd fbe1 	bl	8000b78 <HAL_GPIO_ReadPin>



		  if (StanPrzycisku == GPIO_PIN_RESET)
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <HAL_GPIO_EXTI_Callback+0x88>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033be:	b913      	cbnz	r3, 80033c6 <HAL_GPIO_EXTI_Callback+0x26>
		  {

			  TIM1->CCR1 = 0;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_GPIO_EXTI_Callback+0x8c>)
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR2 = 0;
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38


		PoprzedniStanPrzycisku = OdczytanyStanPrzycisku;


		HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
		PoprzedniStanPrzycisku = OdczytanyStanPrzycisku;
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_GPIO_EXTI_Callback+0x90>)
		HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80033ca:	4611      	mov	r1, r2
		PoprzedniStanPrzycisku = OdczytanyStanPrzycisku;
 80033cc:	7018      	strb	r0, [r3, #0]
		HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80033ce:	200a      	movs	r0, #10
 80033d0:	f7fd f976 	bl	80006c0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80033d4:	200a      	movs	r0, #10


		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
}
 80033d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033da:	f7fd b9a5 	b.w	8000728 <HAL_NVIC_EnableIRQ>
	if(GPIO_Pin == PoziomHalasu_Pin)
 80033de:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80033e2:	d11d      	bne.n	8003420 <HAL_GPIO_EXTI_Callback+0x80>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80033e4:	2028      	movs	r0, #40	; 0x28
 80033e6:	f7fd f9ab 	bl	8000740 <HAL_NVIC_DisableIRQ>
		OdczytanyStanPrzycisku2 = HAL_GPIO_ReadPin( PoziomHalasu_GPIO_Port,  PoziomHalasu_Pin);
 80033ea:	4621      	mov	r1, r4
 80033ec:	4811      	ldr	r0, [pc, #68]	; (8003434 <HAL_GPIO_EXTI_Callback+0x94>)
 80033ee:	f7fd fbc3 	bl	8000b78 <HAL_GPIO_ReadPin>
		  if (StanPrzycisku2 == GPIO_PIN_RESET)
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_GPIO_EXTI_Callback+0x98>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b953      	cbnz	r3, 800340e <HAL_GPIO_EXTI_Callback+0x6e>
			  KtoryProgHalasu = (KtoryProgHalasu + 1)%5;
 80033f8:	2205      	movs	r2, #5
 80033fa:	4910      	ldr	r1, [pc, #64]	; (800343c <HAL_GPIO_EXTI_Callback+0x9c>)
 80033fc:	780b      	ldrb	r3, [r1, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	fb93 f2f2 	sdiv	r2, r3, r2
 8003404:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	b2db      	uxtb	r3, r3
 800340c:	700b      	strb	r3, [r1, #0]
		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
		PoprzedniStanPrzycisku2 = OdczytanyStanPrzycisku2;
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_GPIO_EXTI_Callback+0xa0>)
		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003412:	4611      	mov	r1, r2
		PoprzedniStanPrzycisku2 = OdczytanyStanPrzycisku2;
 8003414:	7018      	strb	r0, [r3, #0]
		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003416:	2028      	movs	r0, #40	; 0x28
 8003418:	f7fd f952 	bl	80006c0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800341c:	2028      	movs	r0, #40	; 0x28
 800341e:	e7da      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x36>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	40010800 	.word	0x40010800
 8003428:	2000043c 	.word	0x2000043c
 800342c:	40012c00 	.word	0x40012c00
 8003430:	20000117 	.word	0x20000117
 8003434:	40010c00 	.word	0x40010c00
 8003438:	2000043d 	.word	0x2000043d
 800343c:	20000444 	.word	0x20000444
 8003440:	20000118 	.word	0x20000118

08003444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003444:	4770      	bx	lr
	...

08003448 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_MspInit+0x3c>)
{
 800344a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	619a      	str	r2, [r3, #24]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	f002 0201 	and.w	r2, r2, #1
 800345a:	9200      	str	r2, [sp, #0]
 800345c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003464:	61da      	str	r2, [r3, #28]
 8003466:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003468:	4a07      	ldr	r2, [pc, #28]	; (8003488 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003472:	6853      	ldr	r3, [r2, #4]
 8003474:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800347c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800347e:	b002      	add	sp, #8
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40010000 	.word	0x40010000

0800348c <NMI_Handler>:
 800348c:	4770      	bx	lr

0800348e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800348e:	e7fe      	b.n	800348e <HardFault_Handler>

08003490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003490:	e7fe      	b.n	8003490 <MemManage_Handler>

08003492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003492:	e7fe      	b.n	8003492 <BusFault_Handler>

08003494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003494:	e7fe      	b.n	8003494 <UsageFault_Handler>

08003496 <SVC_Handler>:
 8003496:	4770      	bx	lr

08003498 <DebugMon_Handler>:
 8003498:	4770      	bx	lr

0800349a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800349a:	4770      	bx	lr

0800349c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800349c:	f7fc be8c 	b.w	80001b8 <HAL_IncTick>

080034a0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80034a0:	2010      	movs	r0, #16
 80034a2:	f7fd bb75 	b.w	8000b90 <HAL_GPIO_EXTI_IRQHandler>
	...

080034a8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034a8:	4801      	ldr	r0, [pc, #4]	; (80034b0 <DMA1_Channel1_IRQHandler+0x8>)
 80034aa:	f7fd b9f1 	b.w	8000890 <HAL_DMA_IRQHandler>
 80034ae:	bf00      	nop
 80034b0:	200003f4 	.word	0x200003f4

080034b4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80034b4:	4801      	ldr	r0, [pc, #4]	; (80034bc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80034b6:	f7fd bc85 	b.w	8000dc4 <HAL_PCD_IRQHandler>
 80034ba:	bf00      	nop
 80034bc:	20000e9c 	.word	0x20000e9c

080034c0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80034c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80034c4:	f7fd bb64 	b.w	8000b90 <HAL_GPIO_EXTI_IRQHandler>

080034c8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <SystemInit+0x40>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <SystemInit+0x44>)
 80034d6:	400a      	ands	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80034e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80034f4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80034f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80034fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80034fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <SystemInit+0x48>)
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	f8ff0000 	.word	0xf8ff0000
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003514:	6802      	ldr	r2, [r0, #0]
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_TIM_Base_MspInit+0x24>)
{
 8003518:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 800351a:	429a      	cmp	r2, r3
 800351c:	d10a      	bne.n	8003534 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800351e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003528:	619a      	str	r2, [r3, #24]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003534:	b002      	add	sp, #8
 8003536:	4770      	bx	lr
 8003538:	40012c00 	.word	0x40012c00

0800353c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800353c:	b510      	push	{r4, lr}
 800353e:	4604      	mov	r4, r0
 8003540:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	2210      	movs	r2, #16
 8003544:	2100      	movs	r1, #0
 8003546:	a802      	add	r0, sp, #8
 8003548:	f000 face 	bl	8003ae8 <memset>
  if(timHandle->Instance==TIM1)
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_TIM_MspPostInit+0x48>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d114      	bne.n	800357e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003554:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003558:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = EN12_Pin|EN34_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	f042 0204 	orr.w	r2, r2, #4
 8003560:	619a      	str	r2, [r3, #24]
 8003562:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	4808      	ldr	r0, [pc, #32]	; (8003588 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = EN12_Pin|EN34_Pin;
 800356e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003572:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f7fd fa1d 	bl	80009b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800357e:	b006      	add	sp, #24
 8003580:	bd10      	pop	{r4, pc}
 8003582:	bf00      	nop
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40010800 	.word	0x40010800

0800358c <MX_TIM1_Init>:
{
 800358c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358e:	2400      	movs	r4, #0
{
 8003590:	b094      	sub	sp, #80	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003592:	2210      	movs	r2, #16
 8003594:	2100      	movs	r1, #0
 8003596:	a802      	add	r0, sp, #8
 8003598:	f000 faa6 	bl	8003ae8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800359c:	221c      	movs	r2, #28
 800359e:	4621      	mov	r1, r4
 80035a0:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a2:	9400      	str	r4, [sp, #0]
 80035a4:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a6:	f000 fa9f 	bl	8003ae8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035aa:	221c      	movs	r2, #28
 80035ac:	4621      	mov	r1, r4
 80035ae:	a80d      	add	r0, sp, #52	; 0x34
 80035b0:	f000 fa9a 	bl	8003ae8 <memset>
  htim1.Init.Prescaler = 959;
 80035b4:	f240 33bf 	movw	r3, #959	; 0x3bf
  htim1.Instance = TIM1;
 80035b8:	482b      	ldr	r0, [pc, #172]	; (8003668 <MX_TIM1_Init+0xdc>)
  htim1.Init.Prescaler = 959;
 80035ba:	4a2c      	ldr	r2, [pc, #176]	; (800366c <MX_TIM1_Init+0xe0>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035bc:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 959;
 80035be:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 999;
 80035c2:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c6:	6104      	str	r4, [r0, #16]
  htim1.Init.Period = 999;
 80035c8:	60c3      	str	r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
 80035ca:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035cc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035ce:	f7fe fb2d 	bl	8001c2c <HAL_TIM_Base_Init>
 80035d2:	b108      	cbz	r0, 80035d8 <MX_TIM1_Init+0x4c>
    Error_Handler();
 80035d4:	f7ff ff36 	bl	8003444 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035dc:	a902      	add	r1, sp, #8
 80035de:	4822      	ldr	r0, [pc, #136]	; (8003668 <MX_TIM1_Init+0xdc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035e0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035e2:	f7fe fa32 	bl	8001a4a <HAL_TIM_ConfigClockSource>
 80035e6:	b108      	cbz	r0, 80035ec <MX_TIM1_Init+0x60>
    Error_Handler();
 80035e8:	f7ff ff2c 	bl	8003444 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035ec:	481e      	ldr	r0, [pc, #120]	; (8003668 <MX_TIM1_Init+0xdc>)
 80035ee:	f7fe fb37 	bl	8001c60 <HAL_TIM_PWM_Init>
 80035f2:	b108      	cbz	r0, 80035f8 <MX_TIM1_Init+0x6c>
    Error_Handler();
 80035f4:	f7ff ff26 	bl	8003444 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f8:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035fa:	4669      	mov	r1, sp
 80035fc:	481a      	ldr	r0, [pc, #104]	; (8003668 <MX_TIM1_Init+0xdc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035fe:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003600:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003602:	f7fe fc1d 	bl	8001e40 <HAL_TIMEx_MasterConfigSynchronization>
 8003606:	b108      	cbz	r0, 800360c <MX_TIM1_Init+0x80>
    Error_Handler();
 8003608:	f7ff ff1c 	bl	8003444 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360e:	2200      	movs	r2, #0
 8003610:	a906      	add	r1, sp, #24
 8003612:	4815      	ldr	r0, [pc, #84]	; (8003668 <MX_TIM1_Init+0xdc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003614:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8003616:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003618:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800361a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361e:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003620:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003622:	f7fe fb63 	bl	8001cec <HAL_TIM_PWM_ConfigChannel>
 8003626:	b108      	cbz	r0, 800362c <MX_TIM1_Init+0xa0>
    Error_Handler();
 8003628:	f7ff ff0c 	bl	8003444 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800362c:	2204      	movs	r2, #4
 800362e:	a906      	add	r1, sp, #24
 8003630:	480d      	ldr	r0, [pc, #52]	; (8003668 <MX_TIM1_Init+0xdc>)
 8003632:	f7fe fb5b 	bl	8001cec <HAL_TIM_PWM_ConfigChannel>
 8003636:	b108      	cbz	r0, 800363c <MX_TIM1_Init+0xb0>
    Error_Handler();
 8003638:	f7ff ff04 	bl	8003444 <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800363c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800363e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003642:	a90d      	add	r1, sp, #52	; 0x34
 8003644:	4808      	ldr	r0, [pc, #32]	; (8003668 <MX_TIM1_Init+0xdc>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003646:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003648:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800364a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800364c:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800364e:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003650:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003652:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003654:	f7fe fbce 	bl	8001df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003658:	b108      	cbz	r0, 800365e <MX_TIM1_Init+0xd2>
    Error_Handler();
 800365a:	f7ff fef3 	bl	8003444 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800365e:	4802      	ldr	r0, [pc, #8]	; (8003668 <MX_TIM1_Init+0xdc>)
 8003660:	f7ff ff6c 	bl	800353c <HAL_TIM_MspPostInit>
}
 8003664:	b014      	add	sp, #80	; 0x50
 8003666:	bd10      	pop	{r4, pc}
 8003668:	20000468 	.word	0x20000468
 800366c:	40012c00 	.word	0x40012c00

08003670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003672:	2200      	movs	r2, #0
 8003674:	490e      	ldr	r1, [pc, #56]	; (80036b0 <MX_USB_DEVICE_Init+0x40>)
 8003676:	480f      	ldr	r0, [pc, #60]	; (80036b4 <MX_USB_DEVICE_Init+0x44>)
 8003678:	f7ff f92f 	bl	80028da <USBD_Init>
 800367c:	b108      	cbz	r0, 8003682 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800367e:	f7ff fee1 	bl	8003444 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003682:	490d      	ldr	r1, [pc, #52]	; (80036b8 <MX_USB_DEVICE_Init+0x48>)
 8003684:	480b      	ldr	r0, [pc, #44]	; (80036b4 <MX_USB_DEVICE_Init+0x44>)
 8003686:	f7ff f93d 	bl	8002904 <USBD_RegisterClass>
 800368a:	b108      	cbz	r0, 8003690 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800368c:	f7ff feda 	bl	8003444 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003690:	490a      	ldr	r1, [pc, #40]	; (80036bc <MX_USB_DEVICE_Init+0x4c>)
 8003692:	4808      	ldr	r0, [pc, #32]	; (80036b4 <MX_USB_DEVICE_Init+0x44>)
 8003694:	f7ff f8f9 	bl	800288a <USBD_CDC_RegisterInterface>
 8003698:	b108      	cbz	r0, 800369e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800369a:	f7ff fed3 	bl	8003444 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800369e:	4805      	ldr	r0, [pc, #20]	; (80036b4 <MX_USB_DEVICE_Init+0x44>)
 80036a0:	f7ff f937 	bl	8002912 <USBD_Start>
 80036a4:	b118      	cbz	r0, 80036ae <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80036a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80036aa:	f7ff becb 	b.w	8003444 <Error_Handler>
 80036ae:	bd08      	pop	{r3, pc}
 80036b0:	20000130 	.word	0x20000130
 80036b4:	200004a8 	.word	0x200004a8
 80036b8:	20000008 	.word	0x20000008
 80036bc:	20000120 	.word	0x20000120

080036c0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80036c0:	2000      	movs	r0, #0
 80036c2:	4770      	bx	lr

080036c4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80036c4:	2000      	movs	r0, #0
 80036c6:	4770      	bx	lr

080036c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80036c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80036ca:	4c05      	ldr	r4, [pc, #20]	; (80036e0 <CDC_Receive_FS+0x18>)
 80036cc:	4601      	mov	r1, r0
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff f8ea 	bl	80028a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80036d4:	4620      	mov	r0, r4
 80036d6:	f7ff f8ed 	bl	80028b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80036da:	2000      	movs	r0, #0
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	bf00      	nop
 80036e0:	200004a8 	.word	0x200004a8

080036e4 <CDC_Init_FS>:
{
 80036e4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80036e6:	4c06      	ldr	r4, [pc, #24]	; (8003700 <CDC_Init_FS+0x1c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	4906      	ldr	r1, [pc, #24]	; (8003704 <CDC_Init_FS+0x20>)
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff f8d3 	bl	8002898 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80036f2:	4905      	ldr	r1, [pc, #20]	; (8003708 <CDC_Init_FS+0x24>)
 80036f4:	4620      	mov	r0, r4
 80036f6:	f7ff f8d7 	bl	80028a8 <USBD_CDC_SetRxBuffer>
}
 80036fa:	2000      	movs	r0, #0
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	200004a8 	.word	0x200004a8
 8003704:	20000ab4 	.word	0x20000ab4
 8003708:	200006cc 	.word	0x200006cc

0800370c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800370c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_PCD_MspInit+0x38>)
 8003710:	6802      	ldr	r2, [r0, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d112      	bne.n	800373c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003716:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800371a:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800371c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800371e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003722:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003724:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003726:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003728:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800372a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003732:	f7fc ffc5 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003736:	2014      	movs	r0, #20
 8003738:	f7fc fff6 	bl	8000728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800373c:	b003      	add	sp, #12
 800373e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003742:	bf00      	nop
 8003744:	40005c00 	.word	0x40005c00

08003748 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003748:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 800374c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003750:	f7ff b8f6 	b.w	8002940 <USBD_LL_SetupStage>

08003754 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003754:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003758:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 800375c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003760:	f7ff b91b 	b.w	800299a <USBD_LL_DataOutStage>

08003764 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003764:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003768:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376a:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800376e:	f7ff b946 	b.w	80029fe <USBD_LL_DataInStage>

08003772 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003772:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003776:	f7ff b9c2 	b.w	8002afe <USBD_LL_SOF>

0800377a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800377a:	6883      	ldr	r3, [r0, #8]
{ 
 800377c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800377e:	2b02      	cmp	r3, #2
{ 
 8003780:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003782:	d001      	beq.n	8003788 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003784:	f7ff fe5e 	bl	8003444 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003788:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800378c:	2101      	movs	r1, #1
 800378e:	f7ff f9a4 	bl	8002ada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003792:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8003796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800379a:	f7ff b97f 	b.w	8002a9c <USBD_LL_Reset>
	...

080037a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80037a0:	b510      	push	{r4, lr}
 80037a2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80037a4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80037a8:	f7ff f99a 	bl	8002ae0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80037ac:	69a3      	ldr	r3, [r4, #24]
 80037ae:	b123      	cbz	r3, 80037ba <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80037b0:	4a02      	ldr	r2, [pc, #8]	; (80037bc <HAL_PCD_SuspendCallback+0x1c>)
 80037b2:	6913      	ldr	r3, [r2, #16]
 80037b4:	f043 0306 	orr.w	r3, r3, #6
 80037b8:	6113      	str	r3, [r2, #16]
 80037ba:	bd10      	pop	{r4, pc}
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80037c0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80037c4:	f7ff b995 	b.w	8002af2 <USBD_LL_Resume>

080037c8 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80037c8:	2302      	movs	r3, #2
 80037ca:	2208      	movs	r2, #8
{
 80037cc:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80037ce:	491c      	ldr	r1, [pc, #112]	; (8003840 <USBD_LL_Init+0x78>)
{
 80037d0:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80037d2:	481c      	ldr	r0, [pc, #112]	; (8003844 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80037d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80037d8:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80037da:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 80037de:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80037e2:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80037e4:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80037e6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80037e8:	f7fd f9de 	bl	8000ba8 <HAL_PCD_Init>
 80037ec:	b108      	cbz	r0, 80037f2 <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 80037ee:	f7ff fe29 	bl	8003444 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2318      	movs	r3, #24
 80037f6:	4611      	mov	r1, r2
 80037f8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80037fc:	f7fd fda6 	bl	800134c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003800:	2358      	movs	r3, #88	; 0x58
 8003802:	2200      	movs	r2, #0
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800380a:	f7fd fd9f 	bl	800134c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800380e:	23c0      	movs	r3, #192	; 0xc0
 8003810:	2200      	movs	r2, #0
 8003812:	2181      	movs	r1, #129	; 0x81
 8003814:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003818:	f7fd fd98 	bl	800134c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800381c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003820:	2200      	movs	r2, #0
 8003822:	2101      	movs	r1, #1
 8003824:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003828:	f7fd fd90 	bl	800134c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800382c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003830:	2200      	movs	r2, #0
 8003832:	2182      	movs	r1, #130	; 0x82
 8003834:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003838:	f7fd fd88 	bl	800134c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800383c:	2000      	movs	r0, #0
 800383e:	bd10      	pop	{r4, pc}
 8003840:	40005c00 	.word	0x40005c00
 8003844:	20000e9c 	.word	0x20000e9c

08003848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003848:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800384a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800384e:	f7fd fa14 	bl	8000c7a <HAL_PCD_Start>
 8003852:	2803      	cmp	r0, #3
 8003854:	bf9a      	itte	ls
 8003856:	4b02      	ldrls	r3, [pc, #8]	; (8003860 <USBD_LL_Start+0x18>)
 8003858:	5c18      	ldrbls	r0, [r3, r0]
 800385a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800385c:	bd08      	pop	{r3, pc}
 800385e:	bf00      	nop
 8003860:	08003b3a 	.word	0x08003b3a

08003864 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003864:	b510      	push	{r4, lr}
 8003866:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003868:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800386c:	4613      	mov	r3, r2
 800386e:	4622      	mov	r2, r4
 8003870:	f7fd fa2e 	bl	8000cd0 <HAL_PCD_EP_Open>
 8003874:	2803      	cmp	r0, #3
 8003876:	bf9a      	itte	ls
 8003878:	4b01      	ldrls	r3, [pc, #4]	; (8003880 <USBD_LL_OpenEP+0x1c>)
 800387a:	5c18      	ldrbls	r0, [r3, r0]
 800387c:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800387e:	bd10      	pop	{r4, pc}
 8003880:	08003b3a 	.word	0x08003b3a

08003884 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003884:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003886:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800388a:	f7fd fa44 	bl	8000d16 <HAL_PCD_EP_Close>
 800388e:	2803      	cmp	r0, #3
 8003890:	bf9a      	itte	ls
 8003892:	4b02      	ldrls	r3, [pc, #8]	; (800389c <USBD_LL_CloseEP+0x18>)
 8003894:	5c18      	ldrbls	r0, [r3, r0]
 8003896:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8003898:	bd08      	pop	{r3, pc}
 800389a:	bf00      	nop
 800389c:	08003b3a 	.word	0x08003b3a

080038a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80038a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80038a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80038a6:	f7fd fd05 	bl	80012b4 <HAL_PCD_EP_SetStall>
 80038aa:	2803      	cmp	r0, #3
 80038ac:	bf9a      	itte	ls
 80038ae:	4b02      	ldrls	r3, [pc, #8]	; (80038b8 <USBD_LL_StallEP+0x18>)
 80038b0:	5c18      	ldrbls	r0, [r3, r0]
 80038b2:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80038b4:	bd08      	pop	{r3, pc}
 80038b6:	bf00      	nop
 80038b8:	08003b3a 	.word	0x08003b3a

080038bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80038bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80038be:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80038c2:	f7fd fd20 	bl	8001306 <HAL_PCD_EP_ClrStall>
 80038c6:	2803      	cmp	r0, #3
 80038c8:	bf9a      	itte	ls
 80038ca:	4b02      	ldrls	r3, [pc, #8]	; (80038d4 <USBD_LL_ClearStallEP+0x18>)
 80038cc:	5c18      	ldrbls	r0, [r3, r0]
 80038ce:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 80038d0:	bd08      	pop	{r3, pc}
 80038d2:	bf00      	nop
 80038d4:	08003b3a 	.word	0x08003b3a

080038d8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80038d8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80038da:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80038de:	bf45      	ittet	mi
 80038e0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80038e4:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80038e8:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80038ec:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80038f0:	bf58      	it	pl
 80038f2:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 80038f6:	4770      	bx	lr

080038f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80038f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80038fa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80038fe:	f7fd f9d3 	bl	8000ca8 <HAL_PCD_SetAddress>
 8003902:	2803      	cmp	r0, #3
 8003904:	bf9a      	itte	ls
 8003906:	4b02      	ldrls	r3, [pc, #8]	; (8003910 <USBD_LL_SetUSBAddress+0x18>)
 8003908:	5c18      	ldrbls	r0, [r3, r0]
 800390a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 800390c:	bd08      	pop	{r3, pc}
 800390e:	bf00      	nop
 8003910:	08003b3a 	.word	0x08003b3a

08003914 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003914:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003916:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800391a:	f7fd fa3c 	bl	8000d96 <HAL_PCD_EP_Transmit>
 800391e:	2803      	cmp	r0, #3
 8003920:	bf9a      	itte	ls
 8003922:	4b02      	ldrls	r3, [pc, #8]	; (800392c <USBD_LL_Transmit+0x18>)
 8003924:	5c18      	ldrbls	r0, [r3, r0]
 8003926:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8003928:	bd08      	pop	{r3, pc}
 800392a:	bf00      	nop
 800392c:	08003b3a 	.word	0x08003b3a

08003930 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003930:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003932:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003936:	f7fd fa0f 	bl	8000d58 <HAL_PCD_EP_Receive>
 800393a:	2803      	cmp	r0, #3
 800393c:	bf9a      	itte	ls
 800393e:	4b02      	ldrls	r3, [pc, #8]	; (8003948 <USBD_LL_PrepareReceive+0x18>)
 8003940:	5c18      	ldrbls	r0, [r3, r0]
 8003942:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8003944:	bd08      	pop	{r3, pc}
 8003946:	bf00      	nop
 8003948:	08003b3a 	.word	0x08003b3a

0800394c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800394c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800394e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003952:	f7fd fa19 	bl	8000d88 <HAL_PCD_EP_GetRxCount>
}
 8003956:	bd08      	pop	{r3, pc}

08003958 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003958:	4800      	ldr	r0, [pc, #0]	; (800395c <USBD_static_malloc+0x4>)
 800395a:	4770      	bx	lr
 800395c:	200001a0 	.word	0x200001a0

08003960 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003960:	4770      	bx	lr

08003962 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003962:	4770      	bx	lr

08003964 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003964:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003966:	4801      	ldr	r0, [pc, #4]	; (800396c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003968:	800b      	strh	r3, [r1, #0]
}
 800396a:	4770      	bx	lr
 800396c:	2000014c 	.word	0x2000014c

08003970 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003970:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003972:	4801      	ldr	r0, [pc, #4]	; (8003978 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003974:	800b      	strh	r3, [r1, #0]
}
 8003976:	4770      	bx	lr
 8003978:	20000160 	.word	0x20000160

0800397c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800397c:	2300      	movs	r3, #0
{
 800397e:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003980:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8003982:	b2dc      	uxtb	r4, r3
 8003984:	42a2      	cmp	r2, r4
 8003986:	d800      	bhi.n	800398a <IntToUnicode+0xe>
  }
}
 8003988:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 800398a:	0f04      	lsrs	r4, r0, #28
 800398c:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800398e:	bf94      	ite	ls
 8003990:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003992:	3437      	addhi	r4, #55	; 0x37
 8003994:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003998:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800399c:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800399e:	7065      	strb	r5, [r4, #1]
 80039a0:	3301      	adds	r3, #1
 80039a2:	e7ee      	b.n	8003982 <IntToUnicode+0x6>

080039a4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80039a4:	231a      	movs	r3, #26
{
 80039a6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80039a8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <USBD_FS_SerialStrDescriptor+0x2c>)
 80039ac:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80039ae:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80039b0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80039b2:	18c0      	adds	r0, r0, r3
 80039b4:	d00a      	beq.n	80039cc <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80039b8:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80039ba:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80039bc:	4906      	ldr	r1, [pc, #24]	; (80039d8 <USBD_FS_SerialStrDescriptor+0x34>)
 80039be:	f7ff ffdd 	bl	800397c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80039c2:	2204      	movs	r2, #4
 80039c4:	4905      	ldr	r1, [pc, #20]	; (80039dc <USBD_FS_SerialStrDescriptor+0x38>)
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7ff ffd8 	bl	800397c <IntToUnicode>
}
 80039cc:	4804      	ldr	r0, [pc, #16]	; (80039e0 <USBD_FS_SerialStrDescriptor+0x3c>)
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	1ffff7e8 	.word	0x1ffff7e8
 80039d4:	1ffff7ec 	.word	0x1ffff7ec
 80039d8:	20000166 	.word	0x20000166
 80039dc:	20000176 	.word	0x20000176
 80039e0:	20000164 	.word	0x20000164

080039e4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80039e4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039e6:	4c04      	ldr	r4, [pc, #16]	; (80039f8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80039e8:	460a      	mov	r2, r1
 80039ea:	4804      	ldr	r0, [pc, #16]	; (80039fc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80039ec:	4621      	mov	r1, r4
 80039ee:	f7ff fa26 	bl	8002e3e <USBD_GetString>
}
 80039f2:	4620      	mov	r0, r4
 80039f4:	bd10      	pop	{r4, pc}
 80039f6:	bf00      	nop
 80039f8:	200012fc 	.word	0x200012fc
 80039fc:	08003b57 	.word	0x08003b57

08003a00 <USBD_FS_ProductStrDescriptor>:
{
 8003a00:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003a02:	4c04      	ldr	r4, [pc, #16]	; (8003a14 <USBD_FS_ProductStrDescriptor+0x14>)
 8003a04:	460a      	mov	r2, r1
 8003a06:	4804      	ldr	r0, [pc, #16]	; (8003a18 <USBD_FS_ProductStrDescriptor+0x18>)
 8003a08:	4621      	mov	r1, r4
 8003a0a:	f7ff fa18 	bl	8002e3e <USBD_GetString>
}
 8003a0e:	4620      	mov	r0, r4
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	bf00      	nop
 8003a14:	200012fc 	.word	0x200012fc
 8003a18:	08003b6a 	.word	0x08003b6a

08003a1c <USBD_FS_ConfigStrDescriptor>:
{
 8003a1c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003a1e:	4c04      	ldr	r4, [pc, #16]	; (8003a30 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003a20:	460a      	mov	r2, r1
 8003a22:	4804      	ldr	r0, [pc, #16]	; (8003a34 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003a24:	4621      	mov	r1, r4
 8003a26:	f7ff fa0a 	bl	8002e3e <USBD_GetString>
}
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	bf00      	nop
 8003a30:	200012fc 	.word	0x200012fc
 8003a34:	08003b3e 	.word	0x08003b3e

08003a38 <USBD_FS_InterfaceStrDescriptor>:
{
 8003a38:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a3a:	4c04      	ldr	r4, [pc, #16]	; (8003a4c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	4804      	ldr	r0, [pc, #16]	; (8003a50 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003a40:	4621      	mov	r1, r4
 8003a42:	f7ff f9fc 	bl	8002e3e <USBD_GetString>
}
 8003a46:	4620      	mov	r0, r4
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200012fc 	.word	0x200012fc
 8003a50:	08003b49 	.word	0x08003b49

08003a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a56:	e003      	b.n	8003a60 <LoopCopyDataInit>

08003a58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a5e:	3104      	adds	r1, #4

08003a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a60:	480a      	ldr	r0, [pc, #40]	; (8003a8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a68:	d3f6      	bcc.n	8003a58 <CopyDataInit>
  ldr r2, =_sbss
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a6c:	e002      	b.n	8003a74 <LoopFillZerobss>

08003a6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a70:	f842 3b04 	str.w	r3, [r2], #4

08003a74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a78:	d3f9      	bcc.n	8003a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a7a:	f7ff fd25 	bl	80034c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a7e:	f000 f80f 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a82:	f7ff fc05 	bl	8003290 <main>
  bx lr
 8003a86:	4770      	bx	lr
  ldr r3, =_sidata
 8003a88:	08003b88 	.word	0x08003b88
  ldr r0, =_sdata
 8003a8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a90:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8003a94:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8003a98:	200014fc 	.word	0x200014fc

08003a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a9c:	e7fe      	b.n	8003a9c <ADC1_2_IRQHandler>
	...

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	2500      	movs	r5, #0
 8003aa4:	4e0c      	ldr	r6, [pc, #48]	; (8003ad8 <__libc_init_array+0x38>)
 8003aa6:	4c0d      	ldr	r4, [pc, #52]	; (8003adc <__libc_init_array+0x3c>)
 8003aa8:	1ba4      	subs	r4, r4, r6
 8003aaa:	10a4      	asrs	r4, r4, #2
 8003aac:	42a5      	cmp	r5, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	f000 f822 	bl	8003af8 <_init>
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	4e0a      	ldr	r6, [pc, #40]	; (8003ae0 <__libc_init_array+0x40>)
 8003ab8:	4c0a      	ldr	r4, [pc, #40]	; (8003ae4 <__libc_init_array+0x44>)
 8003aba:	1ba4      	subs	r4, r4, r6
 8003abc:	10a4      	asrs	r4, r4, #2
 8003abe:	42a5      	cmp	r5, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac8:	4798      	blx	r3
 8003aca:	3501      	adds	r5, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad2:	4798      	blx	r3
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	08003b80 	.word	0x08003b80
 8003adc:	08003b80 	.word	0x08003b80
 8003ae0:	08003b80 	.word	0x08003b80
 8003ae4:	08003b84 	.word	0x08003b84

08003ae8 <memset>:
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4402      	add	r2, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <_init>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

08003b04 <_fini>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr
